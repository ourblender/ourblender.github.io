{
  "contractName": "withdrawVerifier",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[7]",
          "name": "inputs",
          "type": "uint256[7]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[7]",
          "name": "input",
          "type": "uint256[7]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "7656:6308:16:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7656:6308:16;;;;;;;",
  "deployedSourceMap": "7656:6308:16:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7656:6308:16;;;;;;;;;;;;;;;;;;;;;;;;13488:474;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;13488:474:16;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;13488:474:16;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;13488:474:16;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;13488:474:16;;-1:-1:-1;13488:474:16;-1:-1:-1;13488:474:16;:::i;:::-;;;;;;;;;;;;;;;;;;12804:678;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;12804:678:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;-1:-1;12804:678:16;;;;;;;;;;;;;;;;;;-1:-1:-1;12804:678:16;-1:-1:-1;12804:678:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;;;12804:678:16;;;;;;;;;;;;-1:-1:-1;;12804:678:16;;;;;;;;;;;;;;;;;-1:-1:-1;12804:678:16;-1:-1:-1;12804:678:16;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;;12804:678:16;;;;;;;;;;;;;;;;;;;-1:-1:-1;12804:678:16;;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;12804:678:16;;-1:-1:-1;12804:678:16;;-1:-1:-1;;;;12804:678:16:i;13488:474::-;13606:6;13703:19;;:::i;:::-;13736:20;;:::i;:::-;13770;;:::i;:::-;13804:19;;:::i;:::-;13847:5;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;13836:67:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;;13836:67:16;;;;;;;;;;;;;;;;;-1:-1:-1;13836:67:16;;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;;13836:67:16;;;;;;;;;;;;;;;;;-1:-1:-1;13836:67:16;;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;;13836:67:16;;;;;;;;;;;;;;;;;-1:-1:-1;13836:67:16;;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;;13920:35:16;;;;;;;;;;;;;;;;;;;;;;;;;;13689:214;;-1:-1:-1;13689:214:16;;-1:-1:-1;13689:214:16;;-1:-1:-1;13836:67:16;;-1:-1:-1;13920:35:16;;13689:214;;13920:35;13836:67;;-1:-1:-1;13920:35:16;;-1:-1:-1;13948:6:16;;-1:-1:-1;13920:35:16;;-1:-1:-1;13920:35:16;;13948:6;;13920:35;13948:6;13920:35;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;13920:11:16;;-1:-1:-1;;13920:35:16:i;:::-;13913:42;13488:474;-1:-1:-1;;;;;;;;13488:474:16:o;12804:678::-;12975:6;12993:18;;:::i;:::-;13031:27;;;;;;;;13047:4;;13031:27;;13047:4;13053;;;;13031:27;;;;13021:37;;;13078:55;;;;;;;13095:4;;:7;13078:55;;;;;;13104:4;;:7;;;13078:55;;;;;;;;;;;;;;;;;;13115:4;;;;;:7;13078:55;;13124:4;:7;;;13078:55;;;;-1:-1:-1;;;13078:55:16;13068:7;;;:65;;;;13153:27;;;;;;;13169:4;;13153:27;;13175:4;;;;13153:27;;;;13143:7;;;:37;13221:27;;13235:12;13221:27;;;;;;;;;13078:55;;13221:27;;;;17:15:-1;;105:10;13221:27:16;88:34:-1;136:17;;-1:-1;;13190:58:16;-1:-1:-1;13263:9:16;13258:93;13282:12;13278:1;:16;13258:93;;;13332:5;13338:1;13332:8;;;;;;;;;;;13315:11;13327:1;13315:14;;;;;;;;;;;;;;;;;:25;13296:3;;13258:93;;;;13364:26;13371:11;13384:5;13364:6;:26::i;:::-;13360:116;;13418:4;13411:11;;;;;;13360:116;13460:5;13453:12;;;;12804:678;;;;;;;:::o;11615:1183::-;11722:7;11788:77;11875:22;;:::i;:::-;11900:14;:12;:14::i;:::-;11875:39;;11952:2;:5;;;:12;11932:5;:12;11947:1;11932:16;:32;11924:63;;;;;-1:-1:-1;;;11924:63:16;;;;;;;;;;;;-1:-1:-1;;;11924:63:16;;;;;;;;;;;;;;;12044:27;;:::i;:::-;-1:-1:-1;12074:21:16;;;;;;;;;-1:-1:-1;12074:21:16;;;;;;;;;12105:320;12129:5;:12;12125:1;:16;12105:320;;;12198:18;12187:5;12193:1;12187:8;;;;;;;;;;;;;;:29;12162:119;;;;;-1:-1:-1;;;12162:119:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;12302:112;12336:4;12358:42;12377:2;:5;;;12383:1;12387;12383:5;12377:12;;;;;;;;;;;;;;12391:5;12397:1;12391:8;;;;;;;;;;;;;;12358:18;:42::i;:::-;12302:16;:112::i;:::-;12295:119;-1:-1:-1;12143:3:16;;12105:320;;;;12441:32;12458:4;12464:2;:5;;;12470:1;12464:8;;;;;;;;;;;;;;12441:16;:32::i;:::-;12434:39;;12501:253;12539:23;12554:5;:7;;;12539:14;:23::i;:::-;12580:5;:7;;;12605:2;:8;;;12631:2;:8;;;12657:4;12679:2;:9;;;12706:5;:7;;;12731:2;:9;;;12501:20;:253::i;:::-;12483:290;;12772:1;12765:8;;;;;;;12483:290;12790:1;12783:8;;;;;11615:1183;;;;;:::o;8008:3601::-;8055:22;;:::i;:::-;8100:206;;;;;;;;8129:77;8100:206;;8220:76;8100:206;;;;;;;;8089:217;;;8327:457;;;;;;;;8374:76;8327:457;;;;;;8468:77;8327:457;;;;;;;;;;;;;;;;;;8591:75;8327:457;;8684:76;8327:457;;;;-1:-1:-1;;;8327:457:16;8316:8;;;:468;;;;8806:459;;;;;;;8853:77;8806:459;;;;;;8948:76;8806:459;;;;;;;;;;;;;9070:76;8806:459;;9164:77;8806:459;;;;-1:-1:-1;;;8806:459:16;8794:9;;;:471;9287:459;;;;;;;9334:76;9287:459;;;;;;9428:77;9287:459;;;;;;;;;;;;;9551:77;9287:459;;9646:76;9287:459;;;;-1:-1:-1;;;9287:459:16;9275:9;;;:471;9764:24;;9786:1;9764:24;;;;;;;;;;9786:1;9764:24;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;9756:5:16;;;:32;;;9809:206;;;;;;;;;9838:77;9809:206;;9929:76;9809:206;;;;9798:5;;:8;;-1:-1:-1;;9798:8:16;;;;;;;;;:217;;;;10036:207;;;;;;;;10065:77;10036:207;;;;10156:77;10036:207;;;10025:2;:5;;;10031:1;10025:8;;;;;;;;;;;;;:218;;;;10264:207;;;;;;;;10293:77;10264:207;;;;10384:77;10264:207;;;10253:2;:5;;;10259:1;10253:8;;;;;;;;;;;;;:218;;;;10492:204;;;;;;;;10521:76;10492:204;;;;10611:75;10492:204;;;10481:2;:5;;;10487:1;10481:8;;;;;;;;;;;;;:215;;;;10717:206;;;;;;;;10746:77;10717:206;;;;10837:76;10717:206;;;10706:2;:5;;;10712:1;10706:8;;;;;;;;;;;;;:217;;;;10944:205;;;;;;;;10973:75;10944:205;;;;11062:77;10944:205;;;10933:2;:5;;;10939:1;10933:8;;;;;;;;;;;;;:216;;;;11170:206;;;;;;;;11199:77;11170:206;;;;11290:76;11170:206;;;11159:2;:5;;;11165:1;11159:8;;;;;;;;;;;;;:217;;;;11397:205;;;;;;;;11426:76;11397:205;;;;11516:76;11397:205;;;11386:2;:5;;;11392:1;11386:8;;;;;;;;;;;;;:216;;;;8008:3601;:::o;3952:623::-;4048:16;;:::i;:::-;4080:23;;:::i;:::-;4124:3;;4113:14;;:8;4148:3;;;;4137:8;;;:14;4161:8;;;:12;;;-1:-1:-1;4349:4:16;4346:1;4340:4;4113:14;4330:1;4323:4;4318:3;4314:14;4303:51;4292:62;-1:-1:-1;4292:62:16;4455:56;;;;4424:87;;4455:56;4484:9;4424:87;;4538:7;4530:38;;;;;-1:-1:-1;;;4530:38:16;;;;;;;;;;;;-1:-1:-1;;;4530:38:16;;;;;;;;;;;;;;;3952:623;;;;;;:::o;3138:660::-;3241:16;;:::i;:::-;3273:23;;:::i;:::-;3317:4;;3306:15;;:8;3342:4;;;;3331:8;;;:15;3367:4;;3356:8;;;:15;3392:4;;;3381:8;;;;:15;;;;-1:-1:-1;;3569:1:16;3563:4;3306:15;3553:1;3546:4;3541:3;3537:14;3526:51;3515:62;-1:-1:-1;3515:62:16;3678:56;;;;3647:87;3761:7;3753:38;;;;;-1:-1:-1;;;3753:38:16;;;;;;;;;;;;-1:-1:-1;;;3753:38:16;;;;;;;;;;;;;;2742:346;2799:14;;:::i;:::-;2995:3;;2904:77;;2995:8;:20;;;;-1:-1:-1;3007:3:16;;;;:8;2995:20;2991:46;;;-1:-1:-1;;3024:13:16;;;;;;;;;-1:-1:-1;3024:13:16;;;;;;;3017:20;;2991:46;3054:27;;;;;;;;3062:1;:3;;;3054:27;;;;3078:1;3072;:3;;;:7;;;;;;3067:1;:13;3054:27;;;3047:34;;;2742:346;;;;:::o;7084:568::-;7389:16;;;7403:1;7389:16;;;;;;;;;7351:4;;7367:19;;7389:16;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;7437:16:16;;;7451:1;7437:16;;;;;;;;;7367:38;;-1:-1:-1;7415:19:16;;7437:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;7415:38;;7471:2;7463;7466:1;7463:5;;;;;;;;;;;;;:10;;;;7491:2;7483;7486:1;7483:5;;;;;;;;;;;;;:10;;;;7511:2;7503;7506:1;7503:5;;;;;;;;;;;;;:10;;;;7531:2;7523;7526:1;7523:5;;;;;;;;;;;;;:10;;;;7551:2;7543;7546:1;7543:5;;;;;;;;;;;;;:10;;;;7571:2;7563;7566:1;7563:5;;;;;;;;;;;;;:10;;;;7591:2;7583;7586:1;7583:5;;;;;;;;;;;;;:10;;;;7611:2;7603;7606:1;7603:5;;;;;;;;;;;;;:10;;;;7630:15;7638:2;7642;7630:7;:15::i;:::-;7623:22;7084:568;-1:-1:-1;;;;;;;;;;;7084:568:16:o;4787:1236::-;4893:4;4934:2;:9;4921:2;:9;:22;4913:57;;;;;-1:-1:-1;;;4913:57:16;;;;;;;;;;;;-1:-1:-1;;;4913:57:16;;;;;;;;;;;;;;;4999:9;;5085:24;;;5049:1;5038:12;;5085:24;;;;;;;;;;;;;5060:22;;5038:12;5085:24;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;5085:24:16;-1:-1:-1;5060:49:16;-1:-1:-1;5124:9:16;5119:302;5143:8;5139:1;:12;5119:302;;;5191:2;5194:1;5191:5;;;;;;;;;;;;;;:7;;;5172:5;5178:1;5182;5178:5;5186:1;5178:9;5172:16;;;;;;;;;;;;;:26;;;;;5231:2;5234:1;5231:5;;;;;;;;;;;;;;:7;;;5212:5;5218:1;5222;5218:5;5226:1;5218:9;5212:16;;;;;;;;;;;;;:26;;;;;5271:2;5274:1;5271:5;;;;;;;;;;;;;;;;;;:7;:10;5252:16;;:5;;5266:1;5262;5258:5;;:9;;5252:16;;;;;;;;;;;:29;;;;;5314:2;5317:1;5314:5;;;;;;;;;;;;;;;;;;:7;5322:1;5314:10;;;;5295:5;5301:1;5305;5301:5;5309:1;5301:9;5295:16;;;;;;;;;;;;;:29;;;;;5357:2;5360:1;5357:5;;;;;;;;;;;;;;:7;;;5365:1;5357:10;;;;;;;;;;;5338:5;5344:1;5348;5344:5;5352:1;5344:9;5338:16;;;;;;;;;;;;;:29;;;;;5400:2;5403:1;5400:5;;;;;;;;;;;;;;:7;;;5408:1;5400:10;;;;;;;;;;;5381:5;5387:1;5391;5387:5;5395:1;5387:9;5381:16;;;;;;;;;;;;;;;;;:29;5153:3;;5119:302;;;;5430:21;;:::i;:::-;5461:12;5753:4;5732:3;5709:4;5698:9;5694:20;5671:4;5664:5;5660:16;5641:1;5618:4;5613:3;5609:14;5581:190;5570:201;-1:-1:-1;5570:201:16;5872:56;;;;5841:87;5955:7;5947:41;;;;;-1:-1:-1;;;5947:41:16;;;;;;;;;;;;-1:-1:-1;;;5947:41:16;;;;;;;;;;;;;;;-1:-1:-1;6005:6:16;:11;;;;-1:-1:-1;;;;;;4787:1236:16:o;7656:6308::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;7656:6308:16;;;-1:-1:-1;;7656:6308:16:o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;7656:6308:16;;;-1:-1:-1;;7656:6308:16:o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;7656:6308:16;;;-1:-1:-1;;7656:6308:16:o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;7656:6308:16;;;-1:-1:-1;;7656:6308:16:o",
  "source": "//\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// 2019 OKIMS\n//      ported to solidity 0.5\n//      fixed linter warnings\n//      added requiere error messages\n//\npragma solidity ^0.5.0;\n\nlibrary Pairing {\n    struct G1Point {\n        uint256 X;\n        uint256 Y;\n    }\n    // Encoding of field elements is: X[0] * z + X[1]\n    struct G2Point {\n        uint256[2] X;\n        uint256[2] Y;\n    }\n\n    /// @return the generator of G1\n    function P1() internal pure returns (G1Point memory) {\n        return G1Point(1, 2);\n    }\n\n    /// @return the generator of G2\n    function P2() internal pure returns (G2Point memory) {\n        // Original code point\n        return\n            G2Point(\n                [\n                    11559732032986387107991004021392285783925812861821192530917403151452391805634,\n                    10857046999023057135944570762232829481370756359578518086990519993285655852781\n                ],\n                [\n                    4082367875863433681332203403145435568316851327593401208105741076214120093531,\n                    8495653923123431417604973247489272438418190587263600148770280649306958101930\n                ]\n            );\n\n        /*\n        // Changed by Jordi point\n        return G2Point(\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\n        );\n*/\n    }\n\n    /// @return the negation of p, i.e. p.addition(p.negate()) should be zero.\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\n        // The prime q in the base field F_q for G1\n\n\n            uint256 q\n         = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n        if (p.X == 0 && p.Y == 0) return G1Point(0, 0);\n        return G1Point(p.X, q - (p.Y % q));\n    }\n\n    /// @return the sum of two points of G1\n    function addition(G1Point memory p1, G1Point memory p2)\n        internal\n        view\n        returns (G1Point memory r)\n    {\n        uint256[4] memory input;\n        input[0] = p1.X;\n        input[1] = p1.Y;\n        input[2] = p2.X;\n        input[3] = p2.Y;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas, 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n                case 0 {\n                    invalid()\n                }\n        }\n        require(success, \"pairing-add-failed\");\n    }\n\n    /// @return the product of a point on G1 and a scalar, i.e.\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\n    function scalar_mul(G1Point memory p, uint256 s)\n        internal\n        view\n        returns (G1Point memory r)\n    {\n        uint256[3] memory input;\n        input[0] = p.X;\n        input[1] = p.Y;\n        input[2] = s;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas, 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n                case 0 {\n                    invalid()\n                }\n        }\n        require(success, \"pairing-mul-failed\");\n    }\n\n    /// @return the result of computing the pairing check\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\n    /// return true.\n    function pairing(G1Point[] memory p1, G2Point[] memory p2)\n        internal\n        view\n        returns (bool)\n    {\n        require(p1.length == p2.length, \"pairing-lengths-failed\");\n        uint256 elements = p1.length;\n        uint256 inputSize = elements * 6;\n        uint256[] memory input = new uint256[](inputSize);\n        for (uint256 i = 0; i < elements; i++) {\n            input[i * 6 + 0] = p1[i].X;\n            input[i * 6 + 1] = p1[i].Y;\n            input[i * 6 + 2] = p2[i].X[0];\n            input[i * 6 + 3] = p2[i].X[1];\n            input[i * 6 + 4] = p2[i].Y[0];\n            input[i * 6 + 5] = p2[i].Y[1];\n        }\n        uint256[1] memory out;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(\n                sub(gas, 2000),\n                8,\n                add(input, 0x20),\n                mul(inputSize, 0x20),\n                out,\n                0x20\n            )\n            // Use \"invalid\" to make gas estimation work\n            switch success\n                case 0 {\n                    invalid()\n                }\n        }\n        require(success, \"pairing-opcode-failed\");\n        return out[0] != 0;\n    }\n\n    /// Convenience method for a pairing check for two pairs.\n    function pairingProd2(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](2);\n        G2Point[] memory p2 = new G2Point[](2);\n        p1[0] = a1;\n        p1[1] = b1;\n        p2[0] = a2;\n        p2[1] = b2;\n        return pairing(p1, p2);\n    }\n\n    /// Convenience method for a pairing check for three pairs.\n    function pairingProd3(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](3);\n        G2Point[] memory p2 = new G2Point[](3);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        return pairing(p1, p2);\n    }\n\n    /// Convenience method for a pairing check for four pairs.\n    function pairingProd4(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2,\n        G1Point memory d1,\n        G2Point memory d2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](4);\n        G2Point[] memory p2 = new G2Point[](4);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p1[3] = d1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        p2[3] = d2;\n        return pairing(p1, p2);\n    }\n}\n\ncontract withdrawVerifier {\n    using Pairing for *;\n    struct VerifyingKey {\n        Pairing.G1Point alfa1;\n        Pairing.G2Point beta2;\n        Pairing.G2Point gamma2;\n        Pairing.G2Point delta2;\n        Pairing.G1Point[] IC;\n    }\n    struct Proof {\n        Pairing.G1Point A;\n        Pairing.G2Point B;\n        Pairing.G1Point C;\n    }\n\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\n        vk.alfa1 = Pairing.G1Point(\n            16954158942519728638790634699427502617277811890854188736964569712256402108874,\n            4853887341475411689162752814686977828753659238758624904436464399911233181789\n        );\n        vk.beta2 = Pairing.G2Point(\n            [\n                3553796587147707868221401440330653878464553447974048256338484083403880871279,\n                10881436069977331413254194381426315885919138028604310586524088533501358955109\n            ],\n            [\n                554219737543102952744483611874143077462185705309891806989145488801073306271,\n                9409363920473337588801036819699444134753219954517443484334340645716975900537\n            ]\n        );\n        vk.gamma2 = Pairing.G2Point(\n            [\n                15835396745809302047857962237408016564677757264735411961895464204275479520101,\n                4816274361064561217008158949208603992562463552030076130951138882879237876002\n            ],\n            [\n                2657349449553812953795906111583580858867466816674108494349782884813347200025,\n                10043126501350062935275553474943176726930010914443447816353590070970104772515\n            ]\n        );\n        vk.delta2 = Pairing.G2Point(\n            [\n                7283580813474622247301806821610231208877772213155618212591703595233267096250,\n                11707105533135571906914329788444133953060232994662578417597467150398664744282\n            ],\n            [\n                11385749369626680203331401051634580287991672919300551086583617479169513319496,\n                9611313099024018606232043820986775911468148051140788277551879224697364709191\n            ]\n        );\n        vk.IC = new Pairing.G1Point[](8);\n        vk.IC[0] = Pairing.G1Point(\n            12912565231570889910296955037854848460681054044597840719031679724966236302695,\n            1618290591174934914130771757973446200900756859557159243491129510642659761181\n        );\n        vk.IC[1] = Pairing.G1Point(\n            14778611837533504514462554570414181360183580929421850888807508102557719724615,\n            18010365132546690092942406451855070395143860207861052154579931039970828688716\n        );\n        vk.IC[2] = Pairing.G1Point(\n            21842787128839192035269608458300323973858943522443094029988883807219296675218,\n            12504530341877947596737738199189848566124046550837184854102649615969596397710\n        );\n        vk.IC[3] = Pairing.G1Point(\n            6702350553342235510040006320179244922766468286016493815181054142373284636503,\n            486510446745553771235793685582506026986002715740751589906965686550863923665\n        );\n        vk.IC[4] = Pairing.G1Point(\n            18295456844681697070812504315172403847139068061461697796154812408892341354744,\n            8586956606144774575262691355503600322190462693290841310821014264086165739962\n        );\n        vk.IC[5] = Pairing.G1Point(\n            583165178558506337090803701407321068723888683963870553226798646114777438216,\n            16564448870558779800710568686173987093691200356730792766741354916477305724325\n        );\n        vk.IC[6] = Pairing.G1Point(\n            16894163527567693999351074375562429490067504929935444794046770610649488194723,\n            6179936640197458957487209685456022255962630517225960304292326023613578579249\n        );\n        vk.IC[7] = Pairing.G1Point(\n            2216753407676926432149475364826467911082264085961142066747165279038767234108,\n            5023177841759340865723216108966485654591090628700583521267084598058245799942\n        );\n    }\n\n    function verify(uint256[] memory input, Proof memory proof)\n        internal\n        view\n        returns (uint256)\n    {\n\n            uint256 snark_scalar_field\n         = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n        VerifyingKey memory vk = verifyingKey();\n        require(input.length + 1 == vk.IC.length, \"verifier-bad-input\");\n        // Compute the linear combination vk_x\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\n        for (uint256 i = 0; i < input.length; i++) {\n            require(\n                input[i] < snark_scalar_field,\n                \"verifier-gte-snark-scalar-field\"\n            );\n            vk_x = Pairing.addition(\n                vk_x,\n                Pairing.scalar_mul(vk.IC[i + 1], input[i])\n            );\n        }\n        vk_x = Pairing.addition(vk_x, vk.IC[0]);\n        if (\n            !Pairing.pairingProd4(\n                Pairing.negate(proof.A),\n                proof.B,\n                vk.alfa1,\n                vk.beta2,\n                vk_x,\n                vk.gamma2,\n                proof.C,\n                vk.delta2\n            )\n        ) return 1;\n        return 0;\n    }\n\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[7] memory input\n    ) public view returns (bool r) {\n        Proof memory proof;\n        proof.A = Pairing.G1Point(a[0], a[1]);\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\n        proof.C = Pairing.G1Point(c[0], c[1]);\n        uint256[] memory inputValues = new uint256[](input.length);\n        for (uint256 i = 0; i < input.length; i++) {\n            inputValues[i] = input[i];\n        }\n        if (verify(inputValues, proof) == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function verifyProof(bytes calldata proof, uint256[7] calldata inputs)\n        external\n        view\n        returns (bool r)\n    {\n        // solidity does not support decoding uint[2][2] yet\n        (\n            uint256[2] memory a,\n            uint256[2] memory b1,\n            uint256[2] memory b2,\n            uint256[2] memory c\n        ) = abi.decode(proof, (uint256[2], uint256[2], uint256[2], uint256[2]));\n        return verifyProof(a, [b1, b2], c, inputs);\n    }\n}\n",
  "compiler": {
    "name": "solc",
    "version": "0.5.17+commit.d19bba13.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.4",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}