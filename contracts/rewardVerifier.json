{
  "contractName": "rewardVerifier",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[6]",
          "name": "inputs",
          "type": "uint256[6]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[6]",
          "name": "input",
          "type": "uint256[6]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50611270806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063695ef6f91461003b578063f398789b146100be575b600080fd5b6100aa600480360360e081101561005157600080fd5b81019060208101813564010000000081111561006c57600080fd5b82018360208201111561007e57600080fd5b803590602001918460018302840111640100000000831117156100a057600080fd5b91935091506101ba565b604080519115158252519081900360200190f35b6100aa60048036036101c08110156100d557600080fd5b6040805180820182529183019291818301918390600290839083908082843760009201829052506040805180820190915293969594608081019493509150600290835b828210156101565760408051808201825290808402860190600290839083908082843760009201919091525050508152600190910190602001610118565b50506040805180820182529396959481810194935091506002908390839080828437600092019190915250506040805160c0818101909252929594938181019392509060069083908390808284376000920191909152509194506102f39350505050565b60006101c4611110565b6101cc611110565b6101d4611110565b6101dc611110565b87876101008110156101ed57600080fd5b604080518082018252918301929181830191839060029083908390808284376000920191909152505060408051808201825292959493818101939250906002908390839080828437600092019190915250506040805180820182529295949381810193925090600290839083908082843760009201919091525050604080518082018252929594938181019392509060029083908390808284376000920191909152505060408051808201825288815260208101889052815160c0818101909352999d50979b509599509097506102e7968b96958995509093508d92506006915083908390808284376000920191909152506102f3915050565b98975050505050505050565b60006102fd61112e565b6040805180820182528751815260208089015181830152908352815160808101835287515181840190815288518301516060808401919091529082528351808501855289840180515182525184015181850152828401528483019190915282518084018452875181528783015181840152848401528251600680825260e0820190945290929091820160c08038833901905050905060005b60068110156103ce578481600681106103aa57fe5b60200201518282815181106103bb57fe5b6020908102919091010152600101610395565b506103d981836103f7565b6103e8576001925050506103ef565b6000925050505b949350505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610422611160565b61042a6105cf565b905080608001515185516001011461047e576040805162461bcd60e51b81526020600482015260126024820152711d995c9a599a595c8b5898590b5a5b9c1d5d60721b604482015290519081900360640190fd5b6104866111a7565b50604080518082019091526000808252602082018190525b865181101561055857838782815181106104b457fe5b60200260200101511061050e576040805162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400604482015290519081900360640190fd5b61054e826105498560800151846001018151811061052857fe5b60200260200101518a858151811061053c57fe5b6020026020010151610b85565b610c1a565b915060010161049e565b5061057b81836080015160008151811061056e57fe5b6020026020010151610c1a565b90506105b161058d8660000151610cab565b8660200151846000015185602001518587604001518b604001518960600151610d37565b6105c157600193505050506105c9565b600093505050505b92915050565b6105d7611160565b6040805180820182527e26d84058d8435fc22d8ccdcf739d95835fb0c2c2ce03f43ded648fda98b54b81527f1fdef59173a4077d657d6ae6aefb3de68dad44b515b3547138f3934723459f226020808301919091529083528151608080820184527f152fa9b55bb150184fe779077a14375d8ab2c07fc071db5f69a8a80d2dc6e9678285019081527e401abaa66c27fbd0ce54fdfd37eaefa915bfbf8a17b2f98e7ef4825aef3a54606080850191909152908352845180860186527f1cf6e87283612ad8a4ed3bb4026a3067eb933f317f6d7bfd8f41a5d57f1f10aa81527f2a12a9a3b08739dbd138aa8bad7a793ccd4897618101e882a5bd18dd4eb5611e818601528385015285840192909252835180820185527f22b71b888c619de3f5788d20cd3f3a62dc4ddfc10116c97b0018f83a6e9c31d28186019081527f2246851066ede8f3dc34fdfddb02f624cf8cd17947ebd73d96d4f000fec488fe828501528152845180860186527f059f9087da703069bebef5b8d861cc28efc7dfd4875902a5954521177fa76a7181527f2ba1e9745410f1b5ae69fc5b35ccb09a65e88214cc5ed7194183c1aa7a1b6448818601528185015285850152835190810184527f2a8b6ddcce6e53f6e4f3167419e1d5429b44490b4377dc6360292cff587a0bc98185019081527f1d07624864dc3dc0105f3be79c64095927cd8581e9b50f9030997e5b3f5003db828401528152835180850185527f28c37b3a20301380235fd9b1bfe01ea202d4abcccd157981d212206c1cffb11281527f15bfd869df9c1c8ac2932f17df61dc41045242e747227c97cc321ccadd575c81818501528184015290840152815160078082526101008201909352919082015b6108596111a7565b81526020019060019003908161085157505060808201908152604080518082019091527f179756b2a4a0c5256592819cd9f13993e06d70680b6fdaa63da6273c91a01a4d81527e45892929bcbaa1e592455448c56735b2169ad1b04142a8f9f018046f2531b16020820152905180516000906108d157fe5b602002602001018190525060405180604001604052807f1ac7ae7e26469ec6ebbf6914ad38ded76cfb85f98bde80c1015142321f2a427581526020017f03d552ccf536788b54fd575f29ba84de53736fd38dcabda7aa92391275528f5b815250816080015160018151811061094257fe5b602002602001018190525060405180604001604052807f2ff479b5d7abec0f1bf1ccdc0ac6a253086e3f5760ea611c444a5fb058c6a59181526020017f15d985e667c5c59dfc780b8fc09fc025e6fcb3de789381fe1343af1bf7d8fee481525081608001516002815181106109b357fe5b602002602001018190525060405180604001604052807f0b67cffd44aab0474e67d57ef2b603916c5bab94cf8aa585c389931724b4aea081526020017f12acaabc0019671743b56e7705b26bfcf93cec5cecc04dcd8ba61bc362aefdcf8152508160800151600381518110610a2457fe5b602002602001018190525060405180604001604052807f1a1a0bea20e808ad36b6e4931e303132c5c91e6bf971593678178a1a2be1635781526020017f204f451fb023bb1a395fe4fea38cb38e4f3062a5c60c86b816a2bf55883208ea8152508160800151600481518110610a9557fe5b602002602001018190525060405180604001604052807f126b6a469eb9bbe15c8706a76ca07af513765110e364533496d11e5d9dab931a81526020017f2fdb6d8a13847556f5e3f1ad248c0c99ec5ea6cbc1810d69f3e96a43539567c28152508160800151600581518110610b0657fe5b602002602001018190525060405180604001604052807f2fe1e908b746608d7c0fb37fab2b67dfa447461fec33b3eacbb95ce46ce27fc381526020017f0e45f917b031ad2321670709195ea43843543b77b2b2bbaa7415dff0fa382ab28152508160800151600681518110610b7757fe5b602002602001018190525090565b610b8d6111a7565b610b956111c1565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808015610bc857610bca565bfe5b5080610c12576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604482015290519081900360640190fd5b505092915050565b610c226111a7565b610c2a6111df565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808015610bc8575080610c12576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b604482015290519081900360640190fd5b610cb36111a7565b81517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790158015610ce657506020830151155b15610d065750506040805180820190915260008082526020820152610d32565b60405180604001604052808460000151815260200182856020015181610d2857fe5b0683038152509150505b919050565b60408051600480825260a0820190925260009160609190816020015b610d5b6111a7565b815260200190600190039081610d5357505060408051600480825260a0820190925291925060609190602082015b610d916111fd565b815260200190600190039081610d895790505090508a82600081518110610db457fe5b60200260200101819052508882600181518110610dcd57fe5b60200260200101819052508682600281518110610de657fe5b60200260200101819052508482600381518110610dff57fe5b60200260200101819052508981600081518110610e1857fe5b60200260200101819052508781600181518110610e3157fe5b60200260200101819052508581600281518110610e4a57fe5b60200260200101819052508381600381518110610e6357fe5b6020026020010181905250610e788282610e87565b9b9a5050505050505050505050565b60008151835114610ed8576040805162461bcd60e51b81526020600482015260166024820152751c185a5c9a5b99cb5b195b99dd1a1ccb59985a5b195960521b604482015290519081900360640190fd5b8251604080516006830280825260c084028201602001909252606090828015610f0b578160200160208202803883390190505b50905060005b8381101561109057868181518110610f2557fe5b602002602001015160000151828260060260000181518110610f4357fe5b602002602001018181525050868181518110610f5b57fe5b602002602001015160200151828260060260010181518110610f7957fe5b602002602001018181525050858181518110610f9157fe5b602090810291909101015151518251839060026006850201908110610fb257fe5b602002602001018181525050858181518110610fca57fe5b60209081029190910101515160016020020151828260060260030181518110610fef57fe5b60200260200101818152505085818151811061100757fe5b60200260200101516020015160006002811061101f57fe5b602002015182826006026004018151811061103657fe5b60200260200101818152505085818151811061104e57fe5b60200260200101516020015160016002811061106657fe5b602002015182826006026005018151811061107d57fe5b6020908102919091010152600101610f11565b5061109961121d565b6000602082602086026020860160086107d05a03fa9050808015610bc8575080611102576040805162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604482015290519081900360640190fd5b505115159695505050505050565b60405180604001604052806002906020820280388339509192915050565b60405180606001604052806111416111a7565b815260200161114e6111fd565b815260200161115b6111a7565b905290565b6040518060a001604052806111736111a7565b81526020016111806111fd565b815260200161118d6111fd565b815260200161119a6111fd565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b60405180606001604052806003906020820280388339509192915050565b60405180608001604052806004906020820280388339509192915050565b6040518060400160405280611210611110565b815260200161115b611110565b6040518060200160405280600190602082028038833950919291505056fea265627a7a72315820077fab5b1e175cd0a71f3f748e691ddd75092906829ea592672dfd4d500a310564736f6c63430005110032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063695ef6f91461003b578063f398789b146100be575b600080fd5b6100aa600480360360e081101561005157600080fd5b81019060208101813564010000000081111561006c57600080fd5b82018360208201111561007e57600080fd5b803590602001918460018302840111640100000000831117156100a057600080fd5b91935091506101ba565b604080519115158252519081900360200190f35b6100aa60048036036101c08110156100d557600080fd5b6040805180820182529183019291818301918390600290839083908082843760009201829052506040805180820190915293969594608081019493509150600290835b828210156101565760408051808201825290808402860190600290839083908082843760009201919091525050508152600190910190602001610118565b50506040805180820182529396959481810194935091506002908390839080828437600092019190915250506040805160c0818101909252929594938181019392509060069083908390808284376000920191909152509194506102f39350505050565b60006101c4611110565b6101cc611110565b6101d4611110565b6101dc611110565b87876101008110156101ed57600080fd5b604080518082018252918301929181830191839060029083908390808284376000920191909152505060408051808201825292959493818101939250906002908390839080828437600092019190915250506040805180820182529295949381810193925090600290839083908082843760009201919091525050604080518082018252929594938181019392509060029083908390808284376000920191909152505060408051808201825288815260208101889052815160c0818101909352999d50979b509599509097506102e7968b96958995509093508d92506006915083908390808284376000920191909152506102f3915050565b98975050505050505050565b60006102fd61112e565b6040805180820182528751815260208089015181830152908352815160808101835287515181840190815288518301516060808401919091529082528351808501855289840180515182525184015181850152828401528483019190915282518084018452875181528783015181840152848401528251600680825260e0820190945290929091820160c08038833901905050905060005b60068110156103ce578481600681106103aa57fe5b60200201518282815181106103bb57fe5b6020908102919091010152600101610395565b506103d981836103f7565b6103e8576001925050506103ef565b6000925050505b949350505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610422611160565b61042a6105cf565b905080608001515185516001011461047e576040805162461bcd60e51b81526020600482015260126024820152711d995c9a599a595c8b5898590b5a5b9c1d5d60721b604482015290519081900360640190fd5b6104866111a7565b50604080518082019091526000808252602082018190525b865181101561055857838782815181106104b457fe5b60200260200101511061050e576040805162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400604482015290519081900360640190fd5b61054e826105498560800151846001018151811061052857fe5b60200260200101518a858151811061053c57fe5b6020026020010151610b85565b610c1a565b915060010161049e565b5061057b81836080015160008151811061056e57fe5b6020026020010151610c1a565b90506105b161058d8660000151610cab565b8660200151846000015185602001518587604001518b604001518960600151610d37565b6105c157600193505050506105c9565b600093505050505b92915050565b6105d7611160565b6040805180820182527e26d84058d8435fc22d8ccdcf739d95835fb0c2c2ce03f43ded648fda98b54b81527f1fdef59173a4077d657d6ae6aefb3de68dad44b515b3547138f3934723459f226020808301919091529083528151608080820184527f152fa9b55bb150184fe779077a14375d8ab2c07fc071db5f69a8a80d2dc6e9678285019081527e401abaa66c27fbd0ce54fdfd37eaefa915bfbf8a17b2f98e7ef4825aef3a54606080850191909152908352845180860186527f1cf6e87283612ad8a4ed3bb4026a3067eb933f317f6d7bfd8f41a5d57f1f10aa81527f2a12a9a3b08739dbd138aa8bad7a793ccd4897618101e882a5bd18dd4eb5611e818601528385015285840192909252835180820185527f22b71b888c619de3f5788d20cd3f3a62dc4ddfc10116c97b0018f83a6e9c31d28186019081527f2246851066ede8f3dc34fdfddb02f624cf8cd17947ebd73d96d4f000fec488fe828501528152845180860186527f059f9087da703069bebef5b8d861cc28efc7dfd4875902a5954521177fa76a7181527f2ba1e9745410f1b5ae69fc5b35ccb09a65e88214cc5ed7194183c1aa7a1b6448818601528185015285850152835190810184527f2a8b6ddcce6e53f6e4f3167419e1d5429b44490b4377dc6360292cff587a0bc98185019081527f1d07624864dc3dc0105f3be79c64095927cd8581e9b50f9030997e5b3f5003db828401528152835180850185527f28c37b3a20301380235fd9b1bfe01ea202d4abcccd157981d212206c1cffb11281527f15bfd869df9c1c8ac2932f17df61dc41045242e747227c97cc321ccadd575c81818501528184015290840152815160078082526101008201909352919082015b6108596111a7565b81526020019060019003908161085157505060808201908152604080518082019091527f179756b2a4a0c5256592819cd9f13993e06d70680b6fdaa63da6273c91a01a4d81527e45892929bcbaa1e592455448c56735b2169ad1b04142a8f9f018046f2531b16020820152905180516000906108d157fe5b602002602001018190525060405180604001604052807f1ac7ae7e26469ec6ebbf6914ad38ded76cfb85f98bde80c1015142321f2a427581526020017f03d552ccf536788b54fd575f29ba84de53736fd38dcabda7aa92391275528f5b815250816080015160018151811061094257fe5b602002602001018190525060405180604001604052807f2ff479b5d7abec0f1bf1ccdc0ac6a253086e3f5760ea611c444a5fb058c6a59181526020017f15d985e667c5c59dfc780b8fc09fc025e6fcb3de789381fe1343af1bf7d8fee481525081608001516002815181106109b357fe5b602002602001018190525060405180604001604052807f0b67cffd44aab0474e67d57ef2b603916c5bab94cf8aa585c389931724b4aea081526020017f12acaabc0019671743b56e7705b26bfcf93cec5cecc04dcd8ba61bc362aefdcf8152508160800151600381518110610a2457fe5b602002602001018190525060405180604001604052807f1a1a0bea20e808ad36b6e4931e303132c5c91e6bf971593678178a1a2be1635781526020017f204f451fb023bb1a395fe4fea38cb38e4f3062a5c60c86b816a2bf55883208ea8152508160800151600481518110610a9557fe5b602002602001018190525060405180604001604052807f126b6a469eb9bbe15c8706a76ca07af513765110e364533496d11e5d9dab931a81526020017f2fdb6d8a13847556f5e3f1ad248c0c99ec5ea6cbc1810d69f3e96a43539567c28152508160800151600581518110610b0657fe5b602002602001018190525060405180604001604052807f2fe1e908b746608d7c0fb37fab2b67dfa447461fec33b3eacbb95ce46ce27fc381526020017f0e45f917b031ad2321670709195ea43843543b77b2b2bbaa7415dff0fa382ab28152508160800151600681518110610b7757fe5b602002602001018190525090565b610b8d6111a7565b610b956111c1565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808015610bc857610bca565bfe5b5080610c12576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604482015290519081900360640190fd5b505092915050565b610c226111a7565b610c2a6111df565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808015610bc8575080610c12576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b604482015290519081900360640190fd5b610cb36111a7565b81517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790158015610ce657506020830151155b15610d065750506040805180820190915260008082526020820152610d32565b60405180604001604052808460000151815260200182856020015181610d2857fe5b0683038152509150505b919050565b60408051600480825260a0820190925260009160609190816020015b610d5b6111a7565b815260200190600190039081610d5357505060408051600480825260a0820190925291925060609190602082015b610d916111fd565b815260200190600190039081610d895790505090508a82600081518110610db457fe5b60200260200101819052508882600181518110610dcd57fe5b60200260200101819052508682600281518110610de657fe5b60200260200101819052508482600381518110610dff57fe5b60200260200101819052508981600081518110610e1857fe5b60200260200101819052508781600181518110610e3157fe5b60200260200101819052508581600281518110610e4a57fe5b60200260200101819052508381600381518110610e6357fe5b6020026020010181905250610e788282610e87565b9b9a5050505050505050505050565b60008151835114610ed8576040805162461bcd60e51b81526020600482015260166024820152751c185a5c9a5b99cb5b195b99dd1a1ccb59985a5b195960521b604482015290519081900360640190fd5b8251604080516006830280825260c084028201602001909252606090828015610f0b578160200160208202803883390190505b50905060005b8381101561109057868181518110610f2557fe5b602002602001015160000151828260060260000181518110610f4357fe5b602002602001018181525050868181518110610f5b57fe5b602002602001015160200151828260060260010181518110610f7957fe5b602002602001018181525050858181518110610f9157fe5b602090810291909101015151518251839060026006850201908110610fb257fe5b602002602001018181525050858181518110610fca57fe5b60209081029190910101515160016020020151828260060260030181518110610fef57fe5b60200260200101818152505085818151811061100757fe5b60200260200101516020015160006002811061101f57fe5b602002015182826006026004018151811061103657fe5b60200260200101818152505085818151811061104e57fe5b60200260200101516020015160016002811061106657fe5b602002015182826006026005018151811061107d57fe5b6020908102919091010152600101610f11565b5061109961121d565b6000602082602086026020860160086107d05a03fa9050808015610bc8575080611102576040805162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604482015290519081900360640190fd5b505115159695505050505050565b60405180604001604052806002906020820280388339509192915050565b60405180606001604052806111416111a7565b815260200161114e6111fd565b815260200161115b6111a7565b905290565b6040518060a001604052806111736111a7565b81526020016111806111fd565b815260200161118d6111fd565b815260200161119a6111fd565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b60405180606001604052806003906020820280388339509192915050565b60405180608001604052806004906020820280388339509192915050565b6040518060400160405280611210611110565b815260200161115b611110565b6040518060200160405280600190602082028038833950919291505056fea265627a7a72315820077fab5b1e175cd0a71f3f748e691ddd75092906829ea592672dfd4d500a310564736f6c63430005110032",
  "sourceMap": "7656:6081:15:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7656:6081:15;;;;;;;",
  "deployedSourceMap": "7656:6081:15:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7656:6081:15;;;;;;;;;;;;;;;;;;;;;;;;13261:474;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;13261:474:15;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;13261:474:15;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;13261:474:15;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;13261:474:15;;-1:-1:-1;13261:474:15;-1:-1:-1;13261:474:15;:::i;:::-;;;;;;;;;;;;;;;;;;12577:678;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;12577:678:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;-1:-1;12577:678:15;;;;;;;;;;;;;;;;;;-1:-1:-1;12577:678:15;-1:-1:-1;12577:678:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;;;12577:678:15;;;;;;;;;;;;-1:-1:-1;;12577:678:15;;;;;;;;;;;;;;;;;-1:-1:-1;12577:678:15;-1:-1:-1;12577:678:15;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;;12577:678:15;;;;;;;;;;;;;;;;;;;-1:-1:-1;12577:678:15;;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;12577:678:15;;-1:-1:-1;12577:678:15;;-1:-1:-1;;;;12577:678:15:i;13261:474::-;13379:6;13476:19;;:::i;:::-;13509:20;;:::i;:::-;13543;;:::i;:::-;13577:19;;:::i;:::-;13620:5;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;13609:67:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;;13609:67:15;;;;;;;;;;;;;;;;;-1:-1:-1;13609:67:15;;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;;13609:67:15;;;;;;;;;;;;;;;;;-1:-1:-1;13609:67:15;;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;;13609:67:15;;;;;;;;;;;;;;;;;-1:-1:-1;13609:67:15;;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;;13693:35:15;;;;;;;;;;;;;;;;;;;;;;;;;;13462:214;;-1:-1:-1;13462:214:15;;-1:-1:-1;13462:214:15;;-1:-1:-1;13609:67:15;;-1:-1:-1;13693:35:15;;13462:214;;13693:35;13609:67;;-1:-1:-1;13693:35:15;;-1:-1:-1;13721:6:15;;-1:-1:-1;13693:35:15;;-1:-1:-1;13693:35:15;;13721:6;;13693:35;13721:6;13693:35;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;13693:11:15;;-1:-1:-1;;13693:35:15:i;:::-;13686:42;13261:474;-1:-1:-1;;;;;;;;13261:474:15:o;12577:678::-;12748:6;12766:18;;:::i;:::-;12804:27;;;;;;;;12820:4;;12804:27;;12820:4;12826;;;;12804:27;;;;12794:37;;;12851:55;;;;;;;12868:4;;:7;12851:55;;;;;;12877:4;;:7;;;12851:55;;;;;;;;;;;;;;;;;;12888:4;;;;;:7;12851:55;;12897:4;:7;;;12851:55;;;;-1:-1:-1;;;12851:55:15;12841:7;;;:65;;;;12926:27;;;;;;;12942:4;;12926:27;;12948:4;;;;12926:27;;;;12916:7;;;:37;12994:27;;13008:12;12994:27;;;;;;;;;12851:55;;12994:27;;;;17:15:-1;;105:10;12994:27:15;88:34:-1;136:17;;-1:-1;;12963:58:15;-1:-1:-1;13036:9:15;13031:93;13055:12;13051:1;:16;13031:93;;;13105:5;13111:1;13105:8;;;;;;;;;;;13088:11;13100:1;13088:14;;;;;;;;;;;;;;;;;:25;13069:3;;13031:93;;;;13137:26;13144:11;13157:5;13137:6;:26::i;:::-;13133:116;;13191:4;13184:11;;;;;;13133:116;13233:5;13226:12;;;;12577:678;;;;;;;:::o;11388:1183::-;11495:7;11561:77;11648:22;;:::i;:::-;11673:14;:12;:14::i;:::-;11648:39;;11725:2;:5;;;:12;11705:5;:12;11720:1;11705:16;:32;11697:63;;;;;-1:-1:-1;;;11697:63:15;;;;;;;;;;;;-1:-1:-1;;;11697:63:15;;;;;;;;;;;;;;;11817:27;;:::i;:::-;-1:-1:-1;11847:21:15;;;;;;;;;-1:-1:-1;11847:21:15;;;;;;;;;11878:320;11902:5;:12;11898:1;:16;11878:320;;;11971:18;11960:5;11966:1;11960:8;;;;;;;;;;;;;;:29;11935:119;;;;;-1:-1:-1;;;11935:119:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;12075:112;12109:4;12131:42;12150:2;:5;;;12156:1;12160;12156:5;12150:12;;;;;;;;;;;;;;12164:5;12170:1;12164:8;;;;;;;;;;;;;;12131:18;:42::i;:::-;12075:16;:112::i;:::-;12068:119;-1:-1:-1;11916:3:15;;11878:320;;;;12214:32;12231:4;12237:2;:5;;;12243:1;12237:8;;;;;;;;;;;;;;12214:16;:32::i;:::-;12207:39;;12274:253;12312:23;12327:5;:7;;;12312:14;:23::i;:::-;12353:5;:7;;;12378:2;:8;;;12404:2;:8;;;12430:4;12452:2;:9;;;12479:5;:7;;;12504:2;:9;;;12274:20;:253::i;:::-;12256:290;;12545:1;12538:8;;;;;;;12256:290;12563:1;12556:8;;;;;11388:1183;;;;;:::o;8006:3376::-;8053:22;;:::i;:::-;8098:204;;;;;;;;8127:74;8098:204;;8215:77;8098:204;;;;;;;;8087:215;;;8323:458;;;;;;;;8370:76;8323:458;;;;;;8464:75;8323:458;;;;;;;;;;;;;;;;;;8585:77;8323:458;;8680:77;8323:458;;;;-1:-1:-1;;;8323:458:15;8312:8;;;:469;;;;8803:460;;;;;;;8850:77;8803:460;;;;;;8945:77;8803:460;;;;;;;;;;;;;9068:76;8803:460;;9162:77;8803:460;;;;-1:-1:-1;;;8803:460:15;8791:9;;;:472;9285:460;;;;;;;9332:77;9285:460;;;;;;9427:77;9285:460;;;;;;;;;;;;;9550:77;9285:460;;9645:76;9285:460;;;;-1:-1:-1;;;9285:460:15;9273:9;;;:472;9763:24;;9785:1;9763:24;;;;;;;;;;9785:1;9763:24;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;9755:5:15;;;:32;;;9808:205;;;;;;;;;9837:77;9808:205;;9928:75;9808:205;;;;9797:5;;:8;;-1:-1:-1;;9797:8:15;;;;;;;;;:216;;;;10034:206;;;;;;;;10063:77;10034:206;;;;10154:76;10034:206;;;10023:2;:5;;;10029:1;10023:8;;;;;;;;;;;;;:217;;;;10261:206;;;;;;;;10290:77;10261:206;;;;10381:76;10261:206;;;10250:2;:5;;;10256:1;10250:8;;;;;;;;;;;;;:217;;;;10488:205;;;;;;;;10517:76;10488:205;;;;10607:76;10488:205;;;10477:2;:5;;;10483:1;10477:8;;;;;;;;;;;;;:216;;;;10714:207;;;;;;;;10743:77;10714:207;;;;10834:77;10714:207;;;10703:2;:5;;;10709:1;10703:8;;;;;;;;;;;;;:218;;;;10942:206;;;;;;;;10971:76;10942:206;;;;11061:77;10942:206;;;10931:2;:5;;;10937:1;10931:8;;;;;;;;;;;;;:217;;;;11169:206;;;;;;;;11198:77;11169:206;;;;11289:76;11169:206;;;11158:2;:5;;;11164:1;11158:8;;;;;;;;;;;;;:217;;;;8006:3376;:::o;3952:623::-;4048:16;;:::i;:::-;4080:23;;:::i;:::-;4124:3;;4113:14;;:8;4148:3;;;;4137:8;;;:14;4161:8;;;:12;;;-1:-1:-1;4349:4:15;4346:1;4340:4;4113:14;4330:1;4323:4;4318:3;4314:14;4303:51;4292:62;-1:-1:-1;4292:62:15;4455:56;;;;4424:87;;4455:56;4484:9;4424:87;;4538:7;4530:38;;;;;-1:-1:-1;;;4530:38:15;;;;;;;;;;;;-1:-1:-1;;;4530:38:15;;;;;;;;;;;;;;;3952:623;;;;;;:::o;3138:660::-;3241:16;;:::i;:::-;3273:23;;:::i;:::-;3317:4;;3306:15;;:8;3342:4;;;;3331:8;;;:15;3367:4;;3356:8;;;:15;3392:4;;;3381:8;;;;:15;;;;-1:-1:-1;;3569:1:15;3563:4;3306:15;3553:1;3546:4;3541:3;3537:14;3526:51;3515:62;-1:-1:-1;3515:62:15;3678:56;;;;3647:87;3761:7;3753:38;;;;;-1:-1:-1;;;3753:38:15;;;;;;;;;;;;-1:-1:-1;;;3753:38:15;;;;;;;;;;;;;;2742:346;2799:14;;:::i;:::-;2995:3;;2904:77;;2995:8;:20;;;;-1:-1:-1;3007:3:15;;;;:8;2995:20;2991:46;;;-1:-1:-1;;3024:13:15;;;;;;;;;-1:-1:-1;3024:13:15;;;;;;;3017:20;;2991:46;3054:27;;;;;;;;3062:1;:3;;;3054:27;;;;3078:1;3072;:3;;;:7;;;;;;3067:1;:13;3054:27;;;3047:34;;;2742:346;;;;:::o;7084:568::-;7389:16;;;7403:1;7389:16;;;;;;;;;7351:4;;7367:19;;7389:16;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;7437:16:15;;;7451:1;7437:16;;;;;;;;;7367:38;;-1:-1:-1;7415:19:15;;7437:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;7415:38;;7471:2;7463;7466:1;7463:5;;;;;;;;;;;;;:10;;;;7491:2;7483;7486:1;7483:5;;;;;;;;;;;;;:10;;;;7511:2;7503;7506:1;7503:5;;;;;;;;;;;;;:10;;;;7531:2;7523;7526:1;7523:5;;;;;;;;;;;;;:10;;;;7551:2;7543;7546:1;7543:5;;;;;;;;;;;;;:10;;;;7571:2;7563;7566:1;7563:5;;;;;;;;;;;;;:10;;;;7591:2;7583;7586:1;7583:5;;;;;;;;;;;;;:10;;;;7611:2;7603;7606:1;7603:5;;;;;;;;;;;;;:10;;;;7630:15;7638:2;7642;7630:7;:15::i;:::-;7623:22;7084:568;-1:-1:-1;;;;;;;;;;;7084:568:15:o;4787:1236::-;4893:4;4934:2;:9;4921:2;:9;:22;4913:57;;;;;-1:-1:-1;;;4913:57:15;;;;;;;;;;;;-1:-1:-1;;;4913:57:15;;;;;;;;;;;;;;;4999:9;;5085:24;;;5049:1;5038:12;;5085:24;;;;;;;;;;;;;5060:22;;5038:12;5085:24;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;5085:24:15;-1:-1:-1;5060:49:15;-1:-1:-1;5124:9:15;5119:302;5143:8;5139:1;:12;5119:302;;;5191:2;5194:1;5191:5;;;;;;;;;;;;;;:7;;;5172:5;5178:1;5182;5178:5;5186:1;5178:9;5172:16;;;;;;;;;;;;;:26;;;;;5231:2;5234:1;5231:5;;;;;;;;;;;;;;:7;;;5212:5;5218:1;5222;5218:5;5226:1;5218:9;5212:16;;;;;;;;;;;;;:26;;;;;5271:2;5274:1;5271:5;;;;;;;;;;;;;;;;;;:7;:10;5252:16;;:5;;5266:1;5262;5258:5;;:9;;5252:16;;;;;;;;;;;:29;;;;;5314:2;5317:1;5314:5;;;;;;;;;;;;;;;;;;:7;5322:1;5314:10;;;;5295:5;5301:1;5305;5301:5;5309:1;5301:9;5295:16;;;;;;;;;;;;;:29;;;;;5357:2;5360:1;5357:5;;;;;;;;;;;;;;:7;;;5365:1;5357:10;;;;;;;;;;;5338:5;5344:1;5348;5344:5;5352:1;5344:9;5338:16;;;;;;;;;;;;;:29;;;;;5400:2;5403:1;5400:5;;;;;;;;;;;;;;:7;;;5408:1;5400:10;;;;;;;;;;;5381:5;5387:1;5391;5387:5;5395:1;5387:9;5381:16;;;;;;;;;;;;;;;;;:29;5153:3;;5119:302;;;;5430:21;;:::i;:::-;5461:12;5753:4;5732:3;5709:4;5698:9;5694:20;5671:4;5664:5;5660:16;5641:1;5618:4;5613:3;5609:14;5581:190;5570:201;-1:-1:-1;5570:201:15;5872:56;;;;5841:87;5955:7;5947:41;;;;;-1:-1:-1;;;5947:41:15;;;;;;;;;;;;-1:-1:-1;;;5947:41:15;;;;;;;;;;;;;;;-1:-1:-1;6005:6:15;:11;;;;-1:-1:-1;;;;;;4787:1236:15:o;7656:6081::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;7656:6081:15;;;-1:-1:-1;;7656:6081:15:o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;7656:6081:15;;;-1:-1:-1;;7656:6081:15:o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;7656:6081:15;;;-1:-1:-1;;7656:6081:15:o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;7656:6081:15;;;-1:-1:-1;;7656:6081:15:o",
  "source": "//\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// 2019 OKIMS\n//      ported to solidity 0.5\n//      fixed linter warnings\n//      added requiere error messages\n//\npragma solidity ^0.5.0;\n\nlibrary Pairing {\n    struct G1Point {\n        uint256 X;\n        uint256 Y;\n    }\n    // Encoding of field elements is: X[0] * z + X[1]\n    struct G2Point {\n        uint256[2] X;\n        uint256[2] Y;\n    }\n\n    /// @return the generator of G1\n    function P1() internal pure returns (G1Point memory) {\n        return G1Point(1, 2);\n    }\n\n    /// @return the generator of G2\n    function P2() internal pure returns (G2Point memory) {\n        // Original code point\n        return\n            G2Point(\n                [\n                    11559732032986387107991004021392285783925812861821192530917403151452391805634,\n                    10857046999023057135944570762232829481370756359578518086990519993285655852781\n                ],\n                [\n                    4082367875863433681332203403145435568316851327593401208105741076214120093531,\n                    8495653923123431417604973247489272438418190587263600148770280649306958101930\n                ]\n            );\n\n        /*\n        // Changed by Jordi point\n        return G2Point(\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\n        );\n*/\n    }\n\n    /// @return the negation of p, i.e. p.addition(p.negate()) should be zero.\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\n        // The prime q in the base field F_q for G1\n\n\n            uint256 q\n         = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n        if (p.X == 0 && p.Y == 0) return G1Point(0, 0);\n        return G1Point(p.X, q - (p.Y % q));\n    }\n\n    /// @return the sum of two points of G1\n    function addition(G1Point memory p1, G1Point memory p2)\n        internal\n        view\n        returns (G1Point memory r)\n    {\n        uint256[4] memory input;\n        input[0] = p1.X;\n        input[1] = p1.Y;\n        input[2] = p2.X;\n        input[3] = p2.Y;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas, 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n                case 0 {\n                    invalid()\n                }\n        }\n        require(success, \"pairing-add-failed\");\n    }\n\n    /// @return the product of a point on G1 and a scalar, i.e.\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\n    function scalar_mul(G1Point memory p, uint256 s)\n        internal\n        view\n        returns (G1Point memory r)\n    {\n        uint256[3] memory input;\n        input[0] = p.X;\n        input[1] = p.Y;\n        input[2] = s;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas, 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n                case 0 {\n                    invalid()\n                }\n        }\n        require(success, \"pairing-mul-failed\");\n    }\n\n    /// @return the result of computing the pairing check\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\n    /// return true.\n    function pairing(G1Point[] memory p1, G2Point[] memory p2)\n        internal\n        view\n        returns (bool)\n    {\n        require(p1.length == p2.length, \"pairing-lengths-failed\");\n        uint256 elements = p1.length;\n        uint256 inputSize = elements * 6;\n        uint256[] memory input = new uint256[](inputSize);\n        for (uint256 i = 0; i < elements; i++) {\n            input[i * 6 + 0] = p1[i].X;\n            input[i * 6 + 1] = p1[i].Y;\n            input[i * 6 + 2] = p2[i].X[0];\n            input[i * 6 + 3] = p2[i].X[1];\n            input[i * 6 + 4] = p2[i].Y[0];\n            input[i * 6 + 5] = p2[i].Y[1];\n        }\n        uint256[1] memory out;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(\n                sub(gas, 2000),\n                8,\n                add(input, 0x20),\n                mul(inputSize, 0x20),\n                out,\n                0x20\n            )\n            // Use \"invalid\" to make gas estimation work\n            switch success\n                case 0 {\n                    invalid()\n                }\n        }\n        require(success, \"pairing-opcode-failed\");\n        return out[0] != 0;\n    }\n\n    /// Convenience method for a pairing check for two pairs.\n    function pairingProd2(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](2);\n        G2Point[] memory p2 = new G2Point[](2);\n        p1[0] = a1;\n        p1[1] = b1;\n        p2[0] = a2;\n        p2[1] = b2;\n        return pairing(p1, p2);\n    }\n\n    /// Convenience method for a pairing check for three pairs.\n    function pairingProd3(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](3);\n        G2Point[] memory p2 = new G2Point[](3);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        return pairing(p1, p2);\n    }\n\n    /// Convenience method for a pairing check for four pairs.\n    function pairingProd4(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2,\n        G1Point memory d1,\n        G2Point memory d2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](4);\n        G2Point[] memory p2 = new G2Point[](4);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p1[3] = d1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        p2[3] = d2;\n        return pairing(p1, p2);\n    }\n}\n\ncontract rewardVerifier {\n    using Pairing for *;\n    struct VerifyingKey {\n        Pairing.G1Point alfa1;\n        Pairing.G2Point beta2;\n        Pairing.G2Point gamma2;\n        Pairing.G2Point delta2;\n        Pairing.G1Point[] IC;\n    }\n    struct Proof {\n        Pairing.G1Point A;\n        Pairing.G2Point B;\n        Pairing.G1Point C;\n    }\n\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\n        vk.alfa1 = Pairing.G1Point(\n            68632700465519242806434824326998282154898130999354898804707205126246937931,\n            14415633203687681050138030819125191557291346451461864477247868213624033353506\n        );\n        vk.beta2 = Pairing.G2Point(\n            [\n                9582782916832493405029496430805494196429007873126133667332222556735472593255,\n                113262689627246533055141228862038316003345504223770627135164829439422839380\n            ],\n            [\n                13101008430689199430894044278007882832515638199070297442240618589894177919146,\n                19030113695857705668206028094089446509865945320939401766518040907735157268766\n            ]\n        );\n        vk.gamma2 = Pairing.G2Point(\n            [\n                15702159893173489654023054719758910644861931939317497436221166944331558040018,\n                15503234520828538162733382038517002224971664979755323305633733382110162749694\n            ],\n            [\n                2543490440287064464941471869235841959019226980144100409229151436748790131313,\n                19735526109615593098841326299181660326584703437028068618032205724040359011400\n            ]\n        );\n        vk.delta2 = Pairing.G2Point(\n            [\n                19243489625781169062772919232934981772664222256451541906992641900020206537673,\n                13130118861248150609564776008636058375938154393066872762984746811347444958171\n            ],\n            [\n                18437899602829773137525597627338850480573781618175444850544117161849778057490,\n                9837531241175433960485503519615037603296454047122930953888811144900486061185\n            ]\n        );\n        vk.IC = new Pairing.G1Point[](7);\n        vk.IC[0] = Pairing.G1Point(\n            10670587790590346525127391846973786329526165870924292678846602408905760840269,\n            122859096472474758479984201184315301868954655027394500890844715706581594545\n        );\n        vk.IC[1] = Pairing.G1Point(\n            12112940933904364756389079584999363989349946812684478058670583132005167940213,\n            1733848439401071429769041212730334415406150130844296438957059340295845613403\n        );\n        vk.IC[2] = Pairing.G1Point(\n            21690654580990621803234088344960618431380176287123844416003622103247797790097,\n            9882899777285884844789935684863938580754885421782381592893859503871788383972\n        );\n        vk.IC[3] = Pairing.G1Point(\n            5158862071679849339710064950220804149265546984039351708119945847694658154144,\n            8446707335000054979707676392553685105452961283143689738208050593533348740559\n        );\n        vk.IC[4] = Pairing.G1Point(\n            11806154318151945440229975656982668832229863659245705929982690338468784071511,\n            14614069147587954181122988027040567623695859397099514071943815644392776141034\n        );\n        vk.IC[5] = Pairing.G1Point(\n            8331417399454857195730575954558814711724015216036563956639088255452144440090,\n            21646399403479850409671428848340671568720281280760064140041522316258982586306\n        );\n        vk.IC[6] = Pairing.G1Point(\n            21657852814868133125534722972189561908227414260101018799267108078630725648323,\n            6456011501109961136108065196397199712188396592177657099753980356564499311282\n        );\n    }\n\n    function verify(uint256[] memory input, Proof memory proof)\n        internal\n        view\n        returns (uint256)\n    {\n\n            uint256 snark_scalar_field\n         = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n        VerifyingKey memory vk = verifyingKey();\n        require(input.length + 1 == vk.IC.length, \"verifier-bad-input\");\n        // Compute the linear combination vk_x\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\n        for (uint256 i = 0; i < input.length; i++) {\n            require(\n                input[i] < snark_scalar_field,\n                \"verifier-gte-snark-scalar-field\"\n            );\n            vk_x = Pairing.addition(\n                vk_x,\n                Pairing.scalar_mul(vk.IC[i + 1], input[i])\n            );\n        }\n        vk_x = Pairing.addition(vk_x, vk.IC[0]);\n        if (\n            !Pairing.pairingProd4(\n                Pairing.negate(proof.A),\n                proof.B,\n                vk.alfa1,\n                vk.beta2,\n                vk_x,\n                vk.gamma2,\n                proof.C,\n                vk.delta2\n            )\n        ) return 1;\n        return 0;\n    }\n\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[6] memory input\n    ) public view returns (bool r) {\n        Proof memory proof;\n        proof.A = Pairing.G1Point(a[0], a[1]);\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\n        proof.C = Pairing.G1Point(c[0], c[1]);\n        uint256[] memory inputValues = new uint256[](input.length);\n        for (uint256 i = 0; i < input.length; i++) {\n            inputValues[i] = input[i];\n        }\n        if (verify(inputValues, proof) == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function verifyProof(bytes calldata proof, uint256[6] calldata inputs)\n        external\n        view\n        returns (bool r)\n    {\n        // solidity does not support decoding uint[2][2] yet\n        (\n            uint256[2] memory a,\n            uint256[2] memory b1,\n            uint256[2] memory b2,\n            uint256[2] memory c\n        ) = abi.decode(proof, (uint256[2], uint256[2], uint256[2], uint256[2]));\n        return verifyProof(a, [b1, b2], c, inputs);\n    }\n}\n",
  "compiler": {
    "name": "solc",
    "version": "0.5.17+commit.d19bba13.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.4",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}