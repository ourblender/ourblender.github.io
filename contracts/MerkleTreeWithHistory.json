{
  "contractName": "MerkleTreeWithHistory",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "blockCount",
          "type": "uint32"
        }
      ],
      "name": "BlockCountUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "updateAtBlock",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRewardRoot",
          "type": "bytes32"
        }
      ],
      "name": "RewardUpdate",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FIELD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ZERO_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "blockCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "levels",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rewardCurrentBlocknum",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rewardCurrentRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rewardNextBlocknum",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rewardNextRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_rroot",
          "type": "bytes32"
        }
      ],
      "name": "isRewardRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50610579806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806390eeb02b116100a2578063cd87a3b411610071578063cd87a3b41461021c578063e829558814610224578063ec73295914610241578063f178e47c14610249578063fc7e9c6f1461026657610116565b806390eeb02b146101d2578063ba70f757146101da578063c2b40ae4146101e2578063c526cb5f146101ff57610116565b80633ce0de9b116100e95780633ce0de9b14610181578063414a37ba146101895780634ecf518b146101915780636d9833e31461019957806383922d29146101ca57610116565b806307225b4d1461011b5780632e2d40ce1461013c57806338bf282e146101445780633a1fa64314610179575b600080fd5b61012361026e565b6040805163ffffffff9092168252519081900360200190f35b610123610282565b6101676004803603604081101561015a57600080fd5b508035906020013561028e565b60408051918252519081900360200190f35b6101676103b2565b6101236103b8565b6101676103c4565b6101236103e8565b6101b6600480360360208110156101af57600080fd5b50356103fa565b604080519115158252519081900360200190f35b61016761046d565b610123610473565b61016761047f565b610167600480360360208110156101f857600080fd5b503561049f565b6101b66004803603602081101561021557600080fd5b50356104b3565b6101236104dc565b6101676004803603602081101561023a57600080fd5b50356104e1565b6101676104ff565b6101676004803603602081101561025f57600080fd5b5035610523565b610123610530565b606b54640100000000900463ffffffff1681565b60695463ffffffff1681565b60408051600280825260608083018452600093909291906020830190803883390190505090508360001c816000815181106102c557fe5b6020026020010181815250508260001c816001815181106102e257fe5b602002602001018181525050600073__Hasher________________________________63c4420fb4836040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b8381101561035a578181015183820152602001610342565b505050509050019250505060206040518083038186803b15801561037d57600080fd5b505af4158015610391573d6000803e3d6000fd5b505050506040513d60208110156103a757600080fd5b505195945050505050565b60685481565b606b5463ffffffff1681565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b60005462010000900463ffffffff1681565b60008161040957506000610468565b60035463ffffffff165b60048163ffffffff166064811061042657fe5b0154831415610439576001915050610468565b63ffffffff8116610448575060645b6003546000199091019063ffffffff808316911614156104135760009150505b919050565b606a5481565b60035463ffffffff1681565b60035460009060049063ffffffff166064811061049857fe5b0154905090565b600481606481106104ac57fe5b0154905081565b6000816104c257506000610468565b6068548214156104d457506001610468565b506000919050565b606481565b600281815481106104ee57fe5b600091825260209091200154905081565b7f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b600181815481106104ee57fe5b600354640100000000900463ffffffff168156fea265627a7a72315820d856c9c9fadeb595a241158fb69a687b623fe8829473abfff3eb92044b2a5ab664736f6c63430005110032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c806390eeb02b116100a2578063cd87a3b411610071578063cd87a3b41461021c578063e829558814610224578063ec73295914610241578063f178e47c14610249578063fc7e9c6f1461026657610116565b806390eeb02b146101d2578063ba70f757146101da578063c2b40ae4146101e2578063c526cb5f146101ff57610116565b80633ce0de9b116100e95780633ce0de9b14610181578063414a37ba146101895780634ecf518b146101915780636d9833e31461019957806383922d29146101ca57610116565b806307225b4d1461011b5780632e2d40ce1461013c57806338bf282e146101445780633a1fa64314610179575b600080fd5b61012361026e565b6040805163ffffffff9092168252519081900360200190f35b610123610282565b6101676004803603604081101561015a57600080fd5b508035906020013561028e565b60408051918252519081900360200190f35b6101676103b2565b6101236103b8565b6101676103c4565b6101236103e8565b6101b6600480360360208110156101af57600080fd5b50356103fa565b604080519115158252519081900360200190f35b61016761046d565b610123610473565b61016761047f565b610167600480360360208110156101f857600080fd5b503561049f565b6101b66004803603602081101561021557600080fd5b50356104b3565b6101236104dc565b6101676004803603602081101561023a57600080fd5b50356104e1565b6101676104ff565b6101676004803603602081101561025f57600080fd5b5035610523565b610123610530565b606b54640100000000900463ffffffff1681565b60695463ffffffff1681565b60408051600280825260608083018452600093909291906020830190803883390190505090508360001c816000815181106102c557fe5b6020026020010181815250508260001c816001815181106102e257fe5b602002602001018181525050600073__Hasher________________________________63c4420fb4836040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b8381101561035a578181015183820152602001610342565b505050509050019250505060206040518083038186803b15801561037d57600080fd5b505af4158015610391573d6000803e3d6000fd5b505050506040513d60208110156103a757600080fd5b505195945050505050565b60685481565b606b5463ffffffff1681565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b60005462010000900463ffffffff1681565b60008161040957506000610468565b60035463ffffffff165b60048163ffffffff166064811061042657fe5b0154831415610439576001915050610468565b63ffffffff8116610448575060645b6003546000199091019063ffffffff808316911614156104135760009150505b919050565b606a5481565b60035463ffffffff1681565b60035460009060049063ffffffff166064811061049857fe5b0154905090565b600481606481106104ac57fe5b0154905081565b6000816104c257506000610468565b6068548214156104d457506001610468565b506000919050565b606481565b600281815481106104ee57fe5b600091825260209091200154905081565b7f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b600181815481106104ee57fe5b600354640100000000900463ffffffff168156fea265627a7a72315820d856c9c9fadeb595a241158fb69a687b623fe8829473abfff3eb92044b2a5ab664736f6c63430005110032",
  "sourceMap": "192:5284:5:-;;;1701:23;8:9:-1;5:2;;;30:1;27;20:12;5:2;1701:23:5;192:5284;;;;;;",
  "deployedSourceMap": "192:5284:5:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;192:5284:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1425:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1245:35;;;:::i;2865:326::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2865:326:5;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1207:32;;;:::i;1321:::-;;;:::i;521:122::-;;;:::i;830:20::-;;;:::i;4651:421::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4651:421:5;;:::i;:::-;;;;;;;;;;;;;;;;;;1286:29;;;:::i;1061:30::-;;;:::i;5374:100::-;;;:::i;1127:39::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1127:39:5;;:::i;5085:235::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5085:235:5;;:::i;777:46::-;;;:::i;1033:22::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1033:22:5;;:::i;649:122::-;;;:::i;996:31::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;996:31:5;;:::i;1097:23::-;;;:::i;1425:24::-;;;;;;;;;:::o;1245:35::-;;;;;;:::o;2865:326::-;3013:16;;;3027:1;3013:16;;;2987:23;3013:16;;;;;2964:7;;2987:23;;3013:16;3027:1;3013:16;;;;;105:10:-1;3013:16:5;88:34:-1;136:17;;-1:-1;3013:16:5;2987:42;;3059:5;3051:14;;3039:6;3046:1;3039:9;;;;;;;;;;;;;:26;;;;;3095:6;3087:15;;3075:6;3082:1;3075:9;;;;;;;;;;;;;:27;;;;;3112:14;3129:6;:15;3145:6;3129:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3129:23:5;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3129:23:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3129:23:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3129:23:5;;2865:326;-1:-1:-1;;;;;2865:326:5:o;1207:32::-;;;;:::o;1321:::-;;;;;;:::o;521:122::-;566:77;521:122;:::o;830:20::-;;;;;;;;;:::o;4651:421::-;4708:4;4728:10;4724:53;;-1:-1:-1;4761:5:5;4754:12;;4724:53;4797:16;;;;4823:221;4853:5;4859:1;4853:8;;;;;;;;;;;4844:5;:17;4840:67;;;4888:4;4881:11;;;;;4840:67;4924:6;;;4920:66;;-1:-1:-1;820:3:5;4920:66;5026:16;;-1:-1:-1;;4999:3:5;;;;5026:16;5021:21;;;5026:16;;5021:21;;4823:221;;5060:5;5053:12;;;4651:421;;;;:::o;1286:29::-;;;;:::o;1061:30::-;;;;;;:::o;5374:100::-;5450:16;;5418:7;;5444:5;;5450:16;;5444:23;;;;;;;;;5437:30;;5374:100;:::o;1127:39::-;;;;;;;;;;;;;-1:-1:-1;1127:39:5;:::o;5085:235::-;5144:4;5164:11;5160:54;;-1:-1:-1;5198:5:5;5191:12;;5160:54;5237:17;;5227:6;:27;5223:69;;;-1:-1:-1;5277:4:5;5270:11;;5223:69;-1:-1:-1;5308:5:5;5085:235;;;:::o;777:46::-;820:3;777:46;:::o;1033:22::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1033:22:5;:::o;649:122::-;694:77;649:122;:::o;996:31::-;;;;;;;;;;1097:23;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.17;\n\nimport \"./proxy/Initializable.sol\";\n\nlibrary Hasher {\n    function poseidon(uint256[] memory inputs)\n        public\n        pure\n        returns (uint256 result);\n}\n\ncontract MerkleTreeWithHistory is Initializable {\n    // The compiler does not reserve a storage slot for constant variables, the optimiser will replace every occurrence\n    // of the constant variables in the compiling process. Hence it is okay to initialize these variables here, even\n    // this is an upgradable contract\n    uint256\n        public constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256\n        public constant ZERO_VALUE = 21663839004416932945382355908790599225266501822907911457504978515578255421292;\n    uint32 public constant ROOT_HISTORY_SIZE = 100;\n\n    uint32 public levels;\n\n    // the following variables are made public for easier testing and debugging and\n    // are not supposed to be accessed in regular code\n    bytes32[] public filledSubtrees;\n    bytes32[] public zeros;\n    uint32 public currentRootIndex;\n    uint32 public nextIndex;\n\n    bytes32[ROOT_HISTORY_SIZE] public roots;\n\n    // this tree stores two roots\n    bytes32 public rewardCurrentRoot;\n    uint32 public rewardCurrentBlocknum;\n    bytes32 public rewardNextRoot;\n    uint32 public rewardNextBlocknum;\n\n    // rewardRoot|--------blockcount-------|nextRewardRoot|----|\n    uint32 public blockCount;\n\n    event RewardUpdate(uint32 updateAtBlock, bytes32 newRewardRoot);\n    event BlockCountUpdate(uint32 blockCount);\n\n    // DO NOT implement a constructor because this is an upgradable logic.\n    // Use the initialize function as a constructor.\n    constructor() public {}\n\n    /**\n     * @dev The initializer\n     */\n    function _initialize(uint32 _treeLevels, uint32 _blockCount)\n        internal\n        initializer\n    {\n        require(_treeLevels > 0, \"_treeLevels should be greater than zero\");\n        require(_treeLevels < 32, \"_treeLevels should be less than 32\");\n        levels = _treeLevels;\n\n        // new\n        blockCount = _blockCount;\n\n        bytes32 currentZero = bytes32(ZERO_VALUE);\n\n        zeros.push(currentZero);\n\n        filledSubtrees.push(currentZero);\n\n        for (uint32 i = 1; i < levels; i++) {\n            currentZero = hashLeftRight(currentZero, currentZero);\n            zeros.push(currentZero);\n            filledSubtrees.push(currentZero);\n        }\n\n        roots[0] = hashLeftRight(currentZero, currentZero);\n\n        //\n        rewardCurrentRoot = roots[0];\n        rewardCurrentBlocknum = uint32(block.number);\n        rewardNextRoot = roots[0];\n        rewardNextBlocknum = uint32(block.number);\n    }\n\n    function _setBlockCount(uint32 _blockCount) internal {\n        blockCount = _blockCount;\n        emit BlockCountUpdate(blockCount);\n    }\n\n    // poseidon\n    function hashLeftRight(bytes32 _left, bytes32 _right)\n        public\n        pure\n        returns (bytes32)\n    {\n        uint256[] memory inputs = new uint256[](2);\n        inputs[0] = uint256(_left);\n        inputs[1] = uint256(_right);\n        uint256 output = Hasher.poseidon(inputs);\n        return bytes32(output);\n    }\n\n    function _insert(bytes32 _leaf) internal returns (uint32 index) {\n        uint32 currentIndex = nextIndex;\n        require(\n            currentIndex != uint32(2)**levels,\n            \"Merkle tree is full. No more leafs can be added\"\n        );\n        nextIndex += 1;\n        bytes32 currentLevelHash = _leaf;\n        bytes32 left;\n        bytes32 right;\n\n        for (uint32 i = 0; i < levels; i++) {\n            if (currentIndex % 2 == 0) {\n                left = currentLevelHash;\n                right = zeros[i];\n\n                filledSubtrees[i] = currentLevelHash;\n            } else {\n                left = filledSubtrees[i];\n                right = currentLevelHash;\n            }\n\n            currentLevelHash = hashLeftRight(left, right);\n\n            currentIndex /= 2;\n        }\n\n        currentRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\n        roots[currentRootIndex] = currentLevelHash;\n\n        // update roots\n        if ((uint32(block.number) - rewardNextBlocknum) >= blockCount) {\n            rewardCurrentRoot = rewardNextRoot;\n            rewardNextRoot = currentLevelHash;\n            // current tree root\n            rewardCurrentBlocknum = rewardNextBlocknum;\n            rewardNextBlocknum = uint32(block.number);\n            emit RewardUpdate(rewardCurrentBlocknum, rewardCurrentRoot);\n        }\n\n        return nextIndex - 1;\n    }\n\n    /**\n      @dev Whether the root is present in the root history\n    */\n    function isKnownRoot(bytes32 _root) public view returns (bool) {\n        if (_root == 0) {\n            return false;\n        }\n        uint32 i = currentRootIndex;\n        do {\n            if (_root == roots[i]) {\n                return true;\n            }\n            if (i == 0) {\n                i = ROOT_HISTORY_SIZE;\n            }\n            i--;\n        } while (i != currentRootIndex);\n        return false;\n    }\n\n    //\n    function isRewardRoot(bytes32 _rroot) public view returns (bool) {\n        if (_rroot == 0) {\n            return false;\n        }\n        if (_rroot == rewardCurrentRoot) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n      @dev Returns the last root\n    */\n    function getLastRoot() public view returns (bytes32) {\n        return roots[currentRootIndex];\n    }\n}\n",
  "compiler": {
    "name": "solc",
    "version": "0.5.17+commit.d19bba13.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.4",
  "devdoc": {
    "methods": {
      "getLastRoot()": {
        "details": "Returns the last root"
      },
      "isKnownRoot(bytes32)": {
        "details": "Whether the root is present in the root history"
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}