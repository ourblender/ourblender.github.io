{
  "contractName": "Blnd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x60806040526b015b6a759f4835dc2400000060005534801561002057600080fd5b5060405161234b38038061234b8339818101604052604081101561004357600080fd5b508051602091820151600080546001600160a01b03841680835260038652604080842080546001600160601b0319166001600160601b03909416939093179092558254825190815291519495939490937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3600180546001600160a01b0319166001600160a01b038381169190911791829055604080516000815292909116602083015280517f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f69281900390910190a150506122218061012a6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063c3cda5201161007c578063c3cda52014610463578063d505accf146104aa578063dd62ed3e146104fb578063e7a324dc14610529578063f1127ed814610531578063fca3b5aa1461058b57610158565b806370a0823114610375578063782d6fe11461039b5780637ecebe00146103e357806395d89b4114610409578063a9059cbb14610411578063b4b5ea571461043d57610158565b806330adf81f1161011557806330adf81f14610296578063313ce5671461029e57806340c10f19146102bc578063587cde1e146102ea5780635c19a95c146103105780636fcfff451461033657610158565b806306fdde031461015d57806307546172146101da578063095ea7b3146101fe57806318160ddd1461023e57806320606b701461025857806323b872dd14610260575b600080fd5b6101656105b1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019f578181015183820152602001610187565b50505050905090810190601f1680156101cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101e26105d4565b604080516001600160a01b039092168252519081900360200190f35b61022a6004803603604081101561021457600080fd5b506001600160a01b0381351690602001356105e3565b604080519115158252519081900360200190f35b6102466106a1565b60408051918252519081900360200190f35b6102466106a7565b61022a6004803603606081101561027657600080fd5b506001600160a01b038135811691602081013590911690604001356106c2565b610246610807565b6102a6610822565b6040805160ff9092168252519081900360200190f35b6102e8600480360360408110156102d257600080fd5b506001600160a01b038135169060200135610827565b005b6101e26004803603602081101561030057600080fd5b50356001600160a01b03166109f8565b6102e86004803603602081101561032657600080fd5b50356001600160a01b0316610a13565b61035c6004803603602081101561034c57600080fd5b50356001600160a01b0316610a20565b6040805163ffffffff9092168252519081900360200190f35b6102466004803603602081101561038b57600080fd5b50356001600160a01b0316610a38565b6103c7600480360360408110156103b157600080fd5b506001600160a01b038135169060200135610a5c565b604080516001600160601b039092168252519081900360200190f35b610246600480360360208110156103f957600080fd5b50356001600160a01b0316610c89565b610165610c9b565b61022a6004803603604081101561042757600080fd5b506001600160a01b038135169060200135610cbb565b6103c76004803603602081101561045357600080fd5b50356001600160a01b0316610cf7565b6102e8600480360360c081101561047957600080fd5b506001600160a01b038135169060208101359060408101359060ff6060820135169060808101359060a00135610d68565b6102e8600480360360e08110156104c057600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611010565b6102466004803603604081101561051157600080fd5b506001600160a01b0381358116916020013516611451565b610246611485565b6105636004803603604081101561054757600080fd5b5080356001600160a01b0316906020013563ffffffff166114a0565b6040805163ffffffff90931683526001600160601b0390911660208301528051918290030190f35b6102e8600480360360208110156105a157600080fd5b50356001600160a01b03166114d5565b60405180604001604052806007815260200166213632b73232b960c91b81525081565b6001546001600160a01b031681565b6000806000198314156105f9575060001961061e565b61061b83604051806060016040528060258152602001611fff60259139611588565b90505b3360008181526002602090815260408083206001600160a01b0389168085529083529281902080546001600160601b0319166001600160601b038716908117909155815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a360019150505b92915050565b60005481565b604051806043611fbc82396043019050604051809103902081565b6001600160a01b03831660009081526002602090815260408083203380855290835281842054825160608101909352602580845291936001600160601b0390911692859261071a9288929190611fff90830139611588565b9050866001600160a01b0316836001600160a01b03161415801561074757506001600160601b0382811614155b156107ef57600061077183836040518060600160405280603d81526020016120f6603d9139611622565b6001600160a01b038981166000818152600260209081526040808320948a168084529482529182902080546001600160601b0319166001600160601b03871690811790915582519081529151949550929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92592918290030190a3505b6107fa87878361168f565b5060019695505050505050565b604051806052611f1d82396052019050604051809103902081565b601281565b6001546001600160a01b031633146108705760405162461bcd60e51b81526004018080602001828103825260248152602001806121696024913960400191505060405180910390fd5b6001600160a01b0382166108b55760405162461bcd60e51b815260040180806020018281038252602f815260200180611dc7602f913960400191505060405180910390fd5b60006108d9826040518060600160405280602281526020016120d460229139611588565b90506109116108f3600054836001600160601b031661186f565b60405180606001604052806027815260200161208560279139611588565b6001600160601b0390811660009081556001600160a01b0385168152600360209081526040918290205482516060810190935260258084526109639491909116928592909190612024908301396118c9565b6001600160a01b038416600081815260036020908152604080832080546001600160601b0319166001600160601b039687161790558051948616855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36001600160a01b038084166000908152600460205260408120546109f3921683611933565b505050565b6004602052600090815260409020546001600160a01b031681565b610a1d3382611ac5565b50565b60066020526000908152604090205463ffffffff1681565b6001600160a01b03166000908152600360205260409020546001600160601b031690565b6000438210610a9c5760405162461bcd60e51b8152600401808060200182810382526027815260200180611ed26027913960400191505060405180910390fd5b6001600160a01b03831660009081526006602052604090205463ffffffff1680610aca57600091505061069b565b6001600160a01b038416600090815260056020908152604080832063ffffffff600019860181168552925290912054168310610b46576001600160a01b03841660009081526005602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b0316905061069b565b6001600160a01b038416600090815260056020908152604080832083805290915290205463ffffffff16831015610b8157600091505061069b565b600060001982015b8163ffffffff168163ffffffff161115610c4457600282820363ffffffff16048103610bb3611d67565b506001600160a01b038716600090815260056020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b03169181019190915290871415610c1f5760200151945061069b9350505050565b805163ffffffff16871115610c3657819350610c3d565b6001820392505b5050610b89565b506001600160a01b038516600090815260056020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b60076020526000908152604090205481565b604051806040016040528060048152602001631093139160e21b81525081565b600080610ce083604051806060016040528060268152602001611da160269139611588565b9050610ced33858361168f565b5060019392505050565b6001600160a01b03811660009081526006602052604081205463ffffffff1680610d22576000610d61565b6001600160a01b0383166000908152600560209081526040808320600019850163ffffffff168452909152902054600160201b90046001600160601b03165b9392505050565b60006040518080611fbc60439139604080519182900360430182208282019091526007825266213632b73232b960c91b60209092019190915290507f3f109b34cbbabcea543cf37c19919b41b5139f0b377f79b48d9fde2c16506dab610dcc611b4f565b3060405160200180858152602001848152602001838152602001826001600160a01b03166001600160a01b031681526020019450505050506040516020818303038152906040528051906020012090506000604051808061218d603a91396040805191829003603a0182206020808401919091526001600160a01b038c1683830152606083018b905260808084018b90528251808503909101815260a08401835280519082012061190160f01b60c085015260c2840187905260e2808501829052835180860390910181526101028501808552815191840191909120600091829052610122860180865281905260ff8c1661014287015261016286018b905261018286018a9052935191965092945091926001926101a28083019392601f198301929081900390910190855afa158015610f0a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610f5c5760405162461bcd60e51b8152600401808060200182810382526026815260200180611f6f6026913960400191505060405180910390fd5b6001600160a01b03811660009081526007602052604090208054600181019091558914610fba5760405162461bcd60e51b8152600401808060200182810382526022815260200180611d7f6022913960400191505060405180910390fd5b87421115610ff95760405162461bcd60e51b81526004018080602001828103825260268152602001806121c76026913960400191505060405180910390fd5b611003818b611ac5565b505050505b505050505050565b6000600019861415611025575060001961104a565b61104786604051806060016040528060248152602001611ef960249139611588565b90505b60006040518080611fbc60439139604080519182900360430182208282019091526007825266213632b73232b960c91b60209092019190915290507f3f109b34cbbabcea543cf37c19919b41b5139f0b377f79b48d9fde2c16506dab6110ae611b4f565b3060405160200180858152602001848152602001838152602001826001600160a01b03166001600160a01b0316815260200194505050505060405160208183030381529060405280519060200120905060006040518080611f1d60529139605201905060405180910390208a8a8a600760008f6001600160a01b03166001600160a01b031681526020019081526020016000206000815480929190600101919050558b60405160200180878152602001866001600160a01b03166001600160a01b03168152602001856001600160a01b03166001600160a01b03168152602001848152602001838152602001828152602001965050505050505060405160208183030381529060405280519060200120905060008282604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050600060018289898960405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561125f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166112c7576040805162461bcd60e51b815260206004820152601f60248201527f426c6e643a3a7065726d69743a20696e76616c6964207369676e617475726500604482015290519081900360640190fd5b8b6001600160a01b0316816001600160a01b03161461132d576040805162461bcd60e51b815260206004820152601a60248201527f426c6e643a3a7065726d69743a20756e617574686f72697a6564000000000000604482015290519081900360640190fd5b88421115611382576040805162461bcd60e51b815260206004820152601f60248201527f426c6e643a3a7065726d69743a207369676e6174757265206578706972656400604482015290519081900360640190fd5b84600260008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160601b0302191690836001600160601b031602179055508a6001600160a01b03168c6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258760405180826001600160601b0316815260200191505060405180910390a3505050505050505050505050565b6001600160a01b0391821660009081526002602090815260408083209390941682529190915220546001600160601b031690565b60405180603a61218d8239603a019050604051809103902081565b600560209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6001546001600160a01b0316331461151e5760405162461bcd60e51b815260040180806020018281038252603e815260200180611e60603e913960400191505060405180910390fd5b600154604080516001600160a01b039283168152918316602083015280517f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f69281900390910190a1600180546001600160a01b0319166001600160a01b0392909216919091179055565b600081600160601b841061161a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156115df5781810151838201526020016115c7565b50505050905090810190601f16801561160c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509192915050565b6000836001600160601b0316836001600160601b0316111582906116875760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156115df5781810151838201526020016115c7565b505050900390565b6001600160a01b0383166116d45760405162461bcd60e51b815260040180806020018281038252603c815260200180612049603c913960400191505060405180910390fd5b6001600160a01b0382166117195760405162461bcd60e51b815260040180806020018281038252603a815260200180611df6603a913960400191505060405180910390fd5b6001600160a01b038316600090815260036020908152604091829020548251606081019093526036808452611764936001600160601b03909216928592919061213390830139611622565b6001600160a01b03848116600090815260036020908152604080832080546001600160601b0319166001600160601b039687161790559286168252908290205482516060810190935260308084526117cc9491909116928592909190611e30908301396118c9565b6001600160a01b0383811660008181526003602090815260409182902080546001600160601b0319166001600160601b039687161790558151948616855290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36001600160a01b038084166000908152600460205260408082205485841683529120546109f392918216911683611933565b600082820183811015610d61576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000838301826001600160601b03808716908316101561192a5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156115df5781810151838201526020016115c7565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561195e57506000816001600160601b0316115b156109f3576001600160a01b03831615611a16576001600160a01b03831660009081526006602052604081205463ffffffff16908161199e5760006119dd565b6001600160a01b0385166000908152600560209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b90506000611a0482856040518060600160405280602881526020016120ac60289139611622565b9050611a1286848484611b53565b5050505b6001600160a01b038216156109f3576001600160a01b03821660009081526006602052604081205463ffffffff169081611a51576000611a90565b6001600160a01b0384166000908152600560209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b90506000611ab78285604051806060016040528060278152602001611f95602791396118c9565b905061100885848484611b53565b6001600160a01b03808316600081815260046020818152604080842080546003845282862054949093528787166001600160a01b031984168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611b49828483611933565b50505050565b4690565b6000611b7743604051806060016040528060348152602001611e9e60349139611d12565b905060008463ffffffff16118015611bc057506001600160a01b038516600090815260056020908152604080832063ffffffff6000198901811685529252909120548282169116145b15611c1f576001600160a01b0385166000908152600560209081526040808320600019880163ffffffff168452909152902080546fffffffffffffffffffffffff000000001916600160201b6001600160601b03851602179055611cbe565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000818152600583528781208c871682528352878120965187549451909516600160201b026fffffffffffffffffffffffff000000001995871663ffffffff19958616179590951694909417909555938252600690935292909220805460018801909316929091169190911790555b604080516001600160601b0380861682528416602082015281516001600160a01b038816927fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724928290030190a25050505050565b600081600160201b841061161a5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156115df5781810151838201526020016115c7565b60408051808201909152600080825260208201529056fe426c6e643a3a64656c656761746542795369673a20696e76616c6964206e6f6e6365426c6e643a3a7472616e736665723a20616d6f756e7420657863656564732039362062697473426c6e643a3a6d696e743a2063616e6e6f74207472616e7366657220746f20746865207a65726f2061646472657373426c6e643a3a5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657220746f20746865207a65726f2061646472657373426c6e643a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f7773426c6e643a3a7365744d696e7465723a206f6e6c7920746865206d696e7465722063616e206368616e676520746865206d696e7465722061646472657373426c6e643a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473426c6e643a3a6765745072696f72566f7465733a206e6f74207965742064657465726d696e6564426c6e643a3a7065726d69743a20616d6f756e74206578636565647320393620626974735065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529426c6e643a3a64656c656761746542795369673a20696e76616c6964207369676e6174757265426c6e643a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773454950373132446f6d61696e28737472696e67206e616d652c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429426c6e643a3a617070726f76653a20616d6f756e7420657863656564732039362062697473426c6e643a3a6d696e743a207472616e7366657220616d6f756e74206f766572666c6f7773426c6e643a3a5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e736665722066726f6d20746865207a65726f2061646472657373426c6e643a3a6d696e743a20746f74616c537570706c7920657863656564732039362062697473426c6e643a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773426c6e643a3a6d696e743a20616d6f756e7420657863656564732039362062697473426c6e643a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e6365426c6e643a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365426c6e643a3a6d696e743a206f6e6c7920746865206d696e7465722063616e206d696e7444656c65676174696f6e28616464726573732064656c6567617465652c75696e74323536206e6f6e63652c75696e743235362065787069727929426c6e643a3a64656c656761746542795369673a207369676e61747572652065787069726564a265627a7a72315820dd68e99ddf6961f199708ba0e0272401bcaf3f985aceedec45b7640c1fe912f064736f6c63430005110032",
  "deployedBytecode": "",
  "sourceMap": "79:17906:1:-;;;468:12;439:41;;3164:241;8:9:-1;5:2;;;30:1;27;20:12;5:2;3164:241:1;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3164:241:1;;;;;;;3255:11;;;-1:-1:-1;;;;;3227:18:1;;;;;:9;:18;;3164:241;3227:18;;;:40;;-1:-1:-1;;;;;;3227:40:1;-1:-1:-1;;;;;3227:40:1;;;;;;;;;;3312:11;;3282:42;;;;;;;3164:241;;;;3227:18;;3282:42;;;;;;;;3334:6;:16;;-1:-1:-1;;;;;;3334:16:1;-1:-1:-1;;;;;3334:16:1;;;;;;;;;;;3365:33;;;-1:-1:-1;3365:33:1;;3391:6;;;;3365:33;;;;;;;;;;;;;;;;3164:241;;79:17906;;;;;;",
  "deployedSourceMap": "79:17906:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;79:17906:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;148:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;148:39:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;537:21;;;:::i;:::-;;;;-1:-1:-1;;;;;537:21:1;;;;;;;;;;;;;;5757:481;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5757:481:1;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;439:41;;;:::i;:::-;;;;;;;;;;;;;;;;1394:136;;;:::i;9214:791::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;9214:791:1;;;;;;;;;;;;;;;;;:::i;1839:151::-;;;:::i;343:35::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3950:877;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3950:877:1;;;;;;;;:::i;:::-;;863:44;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;863:44:1;-1:-1:-1;;;;;863:44:1;;:::i;10147:100::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10147:100:1;-1:-1:-1;;;;;10147:100:1;;:::i;1276:48::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1276:48:1;-1:-1:-1;;;;;1276:48:1;;:::i;:::-;;;;;;;;;;;;;;;;;;;8275:110;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8275:110:1;-1:-1:-1;;;;;8275:110:1;;:::i;12570:1251::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;12570:1251:1;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;12570:1251:1;;;;;;;;;;;;;;2068:41;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2068:41:1;-1:-1:-1;;;;;2068:41:1;;:::i;245:38::-;;;:::i;8641:272::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;8641:272:1;;;;;;;;:::i;11917:231::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11917:231:1;-1:-1:-1;;;;;11917:231:1;;:::i;10670:1053::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;;10670:1053:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;6716:1363::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;;6716:1363:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;5123:166::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5123:166:1;;;;;;;;;;:::i;1621:131::-;;;:::i;1142:68::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1142:68:1;;-1:-1:-1;;;;;1142:68:1;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;1142:68:1;;;;;;;;;;;;;;;;3520:262;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3520:262:1;-1:-1:-1;;;;;3520:262:1;;:::i;148:39::-;;;;;;;;;;;;;;-1:-1:-1;;;148:39:1;;;;:::o;537:21::-;;;-1:-1:-1;;;;;537:21:1;;:::o;5757:481::-;5844:4;5864:13;-1:-1:-1;;5891:9:1;:24;5887:219;;;-1:-1:-1;;;5887:219:1;;;5990:105;6015:9;5990:105;;;;;;;;;;;;;;;;;:7;:105::i;:::-;5981:114;;5887:219;6128:10;6116:23;;;;:11;:23;;;;;;;;-1:-1:-1;;;;;6116:32:1;;;;;;;;;;;;:41;;-1:-1:-1;;;;;;6116:41:1;-1:-1:-1;;;;;6116:41:1;;;;;;;;6173:37;;;;;;;6116:32;;6128:10;6173:37;;;;;;;;;;;6227:4;6220:11;;;5757:481;;;;;:::o;439:41::-;;;;:::o;1394:136::-;1436:94;;;;;;;;;;;;;;;;;;1394:136;:::o;9214:791::-;-1:-1:-1;;;;;9409:16:1;;9329:4;9409:16;;;:11;:16;;;;;;;;9363:10;9409:25;;;;;;;;;;9460:93;;;;;;;;;;;;9363:10;;-1:-1:-1;;;;;9409:25:1;;;;9329:4;;9460:93;;9481:9;;9460:93;;;;;;;:7;:93::i;:::-;9444:109;;9579:3;-1:-1:-1;;;;;9568:14:1;:7;-1:-1:-1;;;;;9568:14:1;;;:48;;;;-1:-1:-1;;;;;;9586:30:1;;;;;9568:48;9564:370;;;9632:19;9654:159;9678:16;9712:6;9654:159;;;;;;;;;;;;;;;;;:6;:159::i;:::-;-1:-1:-1;;;;;9827:16:1;;;;;;;:11;:16;;;;;;;;:25;;;;;;;;;;;;;:40;;-1:-1:-1;;;;;;9827:40:1;-1:-1:-1;;;;;9827:40:1;;;;;;;;9887:36;;;;;;;9827:40;;-1:-1:-1;9827:25:1;;:16;;9887:36;;;;;;;;;9564:370;;9944:33;9960:3;9965;9970:6;9944:15;:33::i;:::-;-1:-1:-1;9994:4:1;;9214:791;-1:-1:-1;;;;;;9214:791:1:o;1839:151::-;1881:109;;;;;;;;;;;;;;;;;;1839:151;:::o;343:35::-;376:2;343:35;:::o;3950:877::-;4037:6;;-1:-1:-1;;;;;4037:6:1;4023:10;:20;4015:69;;;;-1:-1:-1;;;4015:69:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4115:17:1;;4094:111;;;;-1:-1:-1;;;4094:111:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4243:13;4259:90;4280:9;4259:90;;;;;;;;;;;;;;;;;:7;:90::i;:::-;4243:106;;4373:119;4394:33;4407:11;;4420:6;-1:-1:-1;;;;;4394:33:1;:12;:33::i;:::-;4373:119;;;;;;;;;;;;;;;;;:7;:119::i;:::-;-1:-1:-1;;;;;4359:133:1;;;:11;:133;;;-1:-1:-1;;;;;4588:14:1;;;;:9;:14;;;;;;;;;;4568:117;;;;;;;;;;;;;;4588:14;;;;;4616:6;;4568:117;;;;;;;;:6;:117::i;:::-;-1:-1:-1;;;;;4551:14:1;;;;;;:9;:14;;;;;;;;:134;;-1:-1:-1;;;;;;4551:134:1;-1:-1:-1;;;;;4551:134:1;;;;;;4700:33;;;;;;;;4551:14;;;;4700:33;;;;;;;;;;-1:-1:-1;;;;;4797:14:1;;;4793:1;4797:14;;;:9;:14;;;;;;4770:50;;4797:14;4813:6;4770:14;:50::i;:::-;3950:877;;;:::o;863:44::-;;;;;;;;;;;;-1:-1:-1;;;;;863:44:1;;:::o;10147:100::-;10208:32;10218:10;10230:9;10208;:32::i;:::-;10147:100;:::o;1276:48::-;;;;;;;;;;;;;;;:::o;8275:110::-;-1:-1:-1;;;;;8360:18:1;8334:7;8360:18;;;:9;:18;;;;;;-1:-1:-1;;;;;8360:18:1;;8275:110::o;12570:1251::-;12676:6;12733:12;12719:11;:26;12698:112;;;;-1:-1:-1;;;12698:112:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;12843:23:1;;12821:19;12843:23;;;:14;:23;;;;;;;;12880:17;12876:56;;12920:1;12913:8;;;;;12876:56;-1:-1:-1;;;;;12989:20:1;;;;;;:11;:20;;;;;;;;:38;-1:-1:-1;;13010:16:1;;12989:38;;;;;;;;;:48;;:63;-1:-1:-1;12985:145:1;;-1:-1:-1;;;;;13075:20:1;;;;;;:11;:20;;;;;;;;-1:-1:-1;;13096:16:1;;;;13075:38;;;;;;;;:44;-1:-1:-1;;;13075:44:1;;-1:-1:-1;;;;;13075:44:1;;-1:-1:-1;13068:51:1;;12985:145;-1:-1:-1;;;;;13188:20:1;;;;;;:11;:20;;;;;;;;:23;;;;;;;;:33;:23;:33;:47;-1:-1:-1;13184:86:1;;;13258:1;13251:8;;;;;13184:86;13280:12;-1:-1:-1;;13321:16:1;;13347:418;13362:5;13354:13;;:5;:13;;;13347:418;;;13425:1;13408:13;;;13407:19;;;13399:27;;13467:20;;:::i;:::-;-1:-1:-1;;;;;;13490:20:1;;;;;;:11;:20;;;;;;;;:28;;;;;;;;;;;;;13467:51;;;;;;;;;;;;;;;-1:-1:-1;;;13467:51:1;;;-1:-1:-1;;;;;13467:51:1;;;;;;;;;13536:27;;13532:223;;;13590:8;;;;-1:-1:-1;13583:15:1;;-1:-1:-1;;;;13583:15:1;13532:223;13623:12;;:26;;;-1:-1:-1;13619:136:1;;;13677:6;13669:14;;13619:136;;;13739:1;13730:6;:10;13722:18;;13619:136;13347:418;;;;;-1:-1:-1;;;;;;13781:20:1;;;;;;:11;:20;;;;;;;;:27;;;;;;;;;;:33;-1:-1:-1;;;;;;;;13781:33:1;;;;;-1:-1:-1;;12570:1251:1;;;;:::o;2068:41::-;;;;;;;;;;;;;:::o;245:38::-;;;;;;;;;;;;;;-1:-1:-1;;;245:38:1;;;;:::o;8641:272::-;8709:4;8725:13;8741:94;8762:9;8741:94;;;;;;;;;;;;;;;;;:7;:94::i;:::-;8725:110;;8845:40;8861:10;8873:3;8878:6;8845:15;:40::i;:::-;-1:-1:-1;8902:4:1;;8641:272;-1:-1:-1;;;8641:272:1:o;11917:231::-;-1:-1:-1;;;;;12022:23:1;;11982:6;12022:23;;;:14;:23;;;;;;;;12074:16;:67;;12140:1;12074:67;;;-1:-1:-1;;;;;12093:20:1;;;;;;:11;:20;;;;;;;;-1:-1:-1;;12114:16:1;;12093:38;;;;;;;;;:44;-1:-1:-1;;;12093:44:1;;-1:-1:-1;;;;;12093:44:1;12074:67;12055:86;11917:231;-1:-1:-1;;;11917:231:1:o;10670:1053::-;10845:23;1436:94;;;;;;;;;;;;;;;;;;;10971:4;;;;;;;;;-1:-1:-1;;;10971:4:1;;;;;;;;1436:94;-1:-1:-1;10955:22:1;10995:13;:11;:13::i;:::-;11034:4;10894:159;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10894:159:1;-1:-1:-1;;;;;10894:159:1;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;10894:159:1;;;10871:192;;;;;;10845:218;;11073:18;1667:85;;;;;;;;;;;;;;;;;;;11117:57;;;;;;;;-1:-1:-1;;;;;11117:57:1;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;11117:57:1;;;;;11094:90;;;;;;-1:-1:-1;;;11234:57:1;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;11234:57:1;;;;;;11211:90;;;;;;;;;-1:-1:-1;11331:26:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11094:90;;-1:-1:-1;11211:90:1;;-1:-1:-1;;;11331:26:1;;;;;;;11117:57;-1:-1:-1;;11331:26:1;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;11331:26:1;;-1:-1:-1;;11331:26:1;;;-1:-1:-1;;;;;;;11388:23:1;;11367:108;;;;-1:-1:-1;;;11367:108:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;11515:17:1;;;;;;:6;:17;;;;;:19;;;;;;;;11506:28;;11485:109;;;;-1:-1:-1;;;11485:109:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11619:6;11612:3;:13;;11604:64;;;;-1:-1:-1;;;11604:64:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11685:31;11695:9;11706;11685;:31::i;:::-;11678:38;;;;10670:1053;;;;;;;:::o;6716:1363::-;6913:13;-1:-1:-1;;6940:9:1;:24;6936:172;;;-1:-1:-1;;;6936:172:1;;;7039:58;7047:9;7039:58;;;;;;;;;;;;;;;;;:7;:58::i;:::-;7030:67;;6936:172;7118:23;1436:94;;;;;;;;;;;;;;;;;;;7244:4;;;;;;;;;-1:-1:-1;;;7244:4:1;;;;;;;;1436:94;-1:-1:-1;7228:22:1;7268:13;:11;:13::i;:::-;7307:4;7167:159;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7167:159:1;-1:-1:-1;;;;;7167:159:1;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7167:159:1;;;7144:192;;;;;;7118:218;;7346:18;1881:109;;;;;;;;;;;;;;;;;;;7451:5;7474:7;7499:9;7526:6;:13;7533:5;-1:-1:-1;;;;;7526:13:1;-1:-1:-1;;;;;7526:13:1;;;;;;;;;;;;;:15;;;;;;;;;;;;7559:8;7390:191;;;;;;;;;;;-1:-1:-1;;;;;7390:191:1;-1:-1:-1;;;;;7390:191:1;;;;;;-1:-1:-1;;;;;7390:191:1;-1:-1:-1;;;;;7390:191:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7390:191:1;;;7367:224;;;;;;7346:245;;7601:14;7670:15;7687:10;7641:57;;;;;;-1:-1:-1;;;7641:57:1;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7641:57:1;;;7618:90;;;;;;7601:107;;7718:17;7738:26;7748:6;7756:1;7759;7762;7738:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;7738:26:1;;-1:-1:-1;;7738:26:1;;;-1:-1:-1;;;;;;;7782:23:1;;7774:67;;;;;-1:-1:-1;;;7774:67:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;7872:5;-1:-1:-1;;;;;7859:18:1;:9;-1:-1:-1;;;;;7859:18:1;;7851:57;;;;;-1:-1:-1;;;7851:57:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;7933:8;7926:3;:15;;7918:59;;;;;-1:-1:-1;;;7918:59:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;8018:6;7988:11;:18;8000:5;-1:-1:-1;;;;;7988:18:1;-1:-1:-1;;;;;7988:18:1;;;;;;;;;;;;:27;8007:7;-1:-1:-1;;;;;7988:27:1;-1:-1:-1;;;;;7988:27:1;;;;;;;;;;;;;:36;;;;;-1:-1:-1;;;;;7988:36:1;;;;;-1:-1:-1;;;;;7988:36:1;;;;;;8056:7;-1:-1:-1;;;;;8040:32:1;8049:5;-1:-1:-1;;;;;8040:32:1;;8065:6;8040:32;;;;-1:-1:-1;;;;;8040:32:1;;;;;;;;;;;;;;;6716:1363;;;;;;;;;;;;:::o;5123:166::-;-1:-1:-1;;;;;5253:20:1;;;5223:7;5253:20;;;:11;:20;;;;;;;;:29;;;;;;;;;;;;-1:-1:-1;;;;;5253:29:1;;5123:166::o;1621:131::-;1667:85;;;;;;;;;;;;;;;;;;1621:131;:::o;1142:68::-;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1142:68:1;;-1:-1:-1;;;;;1142:68:1;;:::o;3520:262::-;3610:6;;-1:-1:-1;;;;;3610:6:1;3596:10;:20;3575:129;;;;-1:-1:-1;;;3575:129:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3733:6;;3719:30;;;-1:-1:-1;;;;;3733:6:1;;;3719:30;;;;;;;;;;;;;;;;;;;;;3759:6;:16;;-1:-1:-1;;;;;;3759:16:1;-1:-1:-1;;;;;3759:16:1;;;;;;;;;;3520:262::o;17194:190::-;17297:6;17338:12;-1:-1:-1;;;17327:9:1;;17319:32;;;;-1:-1:-1;;;17319:32:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;17319:32:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17375:1:1;;17194:190;-1:-1:-1;;17194:190:1:o;17611:193::-;17728:6;17759:1;-1:-1:-1;;;;;17754:6:1;:1;-1:-1:-1;;;;;17754:6:1;;;17762:12;17746:29;;;;;-1:-1:-1;;;17746:29:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17746:29:1;-1:-1:-1;;;17792:5:1;;;17611:193::o;14201:801::-;-1:-1:-1;;;;;14337:17:1;;14316:124;;;;-1:-1:-1;;;14316:124:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;14471:17:1;;14450:122;;;;-1:-1:-1;;;14450:122:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;14620:14:1;;;;;;:9;:14;;;;;;;;;;14600:134;;;;;;;;;;;;;;-1:-1:-1;;;;;14620:14:1;;;;14648:6;;14600:134;;;;;;;:6;:134::i;:::-;-1:-1:-1;;;;;14583:14:1;;;;;;;:9;:14;;;;;;;;:151;;-1:-1:-1;;;;;;14583:151:1;-1:-1:-1;;;;;14583:151:1;;;;;;14781:14;;;;;;;;;;14761:128;;;;;;;;;;;;;;14781:14;;;;;14809:6;;14761:128;;;;;;;;:6;:128::i;:::-;-1:-1:-1;;;;;14744:14:1;;;;;;;:9;:14;;;;;;;;;:145;;-1:-1:-1;;;;;;14744:145:1;-1:-1:-1;;;;;14744:145:1;;;;;;14904:26;;;;;;;;;14744:14;;14904:26;;;;;;;;;;;;;;;-1:-1:-1;;;;;14956:14:1;;;;;;;:9;:14;;;;;;;14972;;;;;;;;14941:54;;14956:14;;;;14972;14988:6;14941:14;:54::i;834:176:17:-;892:7;923:5;;;946:6;;;;938:46;;;;;-1:-1:-1;;;938:46:17;;;;;;;;;;;;;;;;;;;;;;;;;;;17390:215:1;17507:6;17536:5;;;17567:12;-1:-1:-1;;;;;17559:6:1;;;;;;;;17551:29;;;;-1:-1:-1;;;17551:29:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17551:29:1;-1:-1:-1;17597:1:1;17390:215;-1:-1:-1;;;;17390:215:1:o;15008:1191::-;15142:6;-1:-1:-1;;;;;15132:16:1;:6;-1:-1:-1;;;;;15132:16:1;;;:30;;;;;15161:1;15152:6;-1:-1:-1;;;;;15152:10:1;;15132:30;15128:1065;;;-1:-1:-1;;;;;15182:20:1;;;15178:496;;-1:-1:-1;;;;;15241:22:1;;15222:16;15241:22;;;:14;:22;;;;;;;;;15300:13;:100;;15399:1;15300:100;;;-1:-1:-1;;;;;15336:19:1;;;;;;:11;:19;;;;;;;;-1:-1:-1;;15356:13:1;;15336:34;;;;;;;;;:40;-1:-1:-1;;;15336:40:1;;-1:-1:-1;;;;;15336:40:1;15300:100;15281:119;;15418:16;15437:147;15465:9;15496:6;15437:147;;;;;;;;;;;;;;;;;:6;:147::i;:::-;15418:166;;15602:57;15619:6;15627:9;15638;15649;15602:16;:57::i;:::-;15178:496;;;;-1:-1:-1;;;;;15692:20:1;;;15688:495;;-1:-1:-1;;;;;15751:22:1;;15732:16;15751:22;;;:14;:22;;;;;;;;;15810:13;:100;;15909:1;15810:100;;;-1:-1:-1;;;;;15846:19:1;;;;;;:11;:19;;;;;;;;-1:-1:-1;;15866:13:1;;15846:34;;;;;;;;;:40;-1:-1:-1;;;15846:40:1;;-1:-1:-1;;;;;15846:40:1;15810:100;15791:119;;15928:16;15947:146;15975:9;16006:6;15947:146;;;;;;;;;;;;;;;;;:6;:146::i;:::-;15928:165;;16111:57;16128:6;16136:9;16147;16158;16111:16;:57::i;13827:368::-;-1:-1:-1;;;;;13929:20:1;;;13903:23;13929:20;;;:9;:20;;;;;;;;;;13985:9;:20;;;;;;14015;;;;:32;;;-1:-1:-1;;;;;;14015:32:1;;;;;;;14063:54;;13929:20;;;;;-1:-1:-1;;;;;13985:20:1;;;;14015:32;;13929:20;;;14063:54;;13903:23;14063:54;14128:60;14143:15;14160:9;14171:16;14128:14;:60::i;:::-;13827:368;;;;:::o;17810:173::-;17934:9;17810:173;:::o;16205:787::-;16362:18;16383:111;16404:12;16383:111;;;;;;;;;;;;;;;;;:7;:111::i;:::-;16362:132;;16537:1;16522:12;:16;;;:97;;;;-1:-1:-1;;;;;;16554:22:1;;;;;;:11;:22;;;;;;;;:65;-1:-1:-1;;16577:16:1;;16554:40;;;;;;;;;:50;:65;;;:50;;:65;16522:97;16505:414;;;-1:-1:-1;;;;;16644:22:1;;;;;;:11;:22;;;;;;;;-1:-1:-1;;16667:16:1;;16644:40;;;;;;;;;:57;;-1:-1:-1;;16644:57:1;-1:-1:-1;;;;;;;;16644:57:1;;;;;;16505:414;;;16771:79;;;;;;;;;;;;;;-1:-1:-1;;;;;16771:79:1;;;;;;;;;;-1:-1:-1;;;;;16732:22:1;;-1:-1:-1;16732:22:1;;;:11;:22;;;;;:36;;;;;;;;;;:118;;;;;;;;;-1:-1:-1;;;16732:118:1;-1:-1:-1;;16732:118:1;;;-1:-1:-1;;16732:118:1;;;;;;;;;;;;;;;16864:25;;;:14;:25;;;;;;;:44;;16732:118;16892:16;;16864:44;;;;;;;;;;;;;16505:414;16934:51;;;-1:-1:-1;;;;;16934:51:1;;;;;;;;;;;;;-1:-1:-1;;;;;16934:51:1;;;;;;;;;;;16205:787;;;;;:::o;16998:190::-;17101:6;17142:12;-1:-1:-1;;;17131:9:1;;17123:32;;;;-1:-1:-1;;;17123:32:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;79:17906:1;;;;;;;;;;-1:-1:-1;79:17906:1;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.17;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract Blnd {\n    /// @notice EIP-20 token name for this token\n    string public constant name = \"Blender\";\n\n    /// @notice EIP-20 token symbol for this token\n    string public constant symbol = \"BLND\";\n\n    /// @notice EIP-20 token decimals for this token\n    uint8 public constant decimals = 18;\n\n    /// @notice Total number of tokens in circulation\n    uint256 public totalSupply = 420000000e18;\n\n    /// @notice Address which may mint new tokens\n    address public minter;\n\n    /// @notice Allowance amounts on behalf of others\n    mapping(address => mapping(address => uint96)) internal _allowances;\n\n    /// @notice Official record of token balances for each account\n    mapping(address => uint96) internal _balances;\n\n    /// @notice A record of each accounts delegate\n    mapping(address => address) public delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint96 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping(address => uint32) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\n        \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\n    );\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\n        \"Delegation(address delegatee,uint256 nonce,uint256 expiry)\"\n    );\n\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\n        \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n    );\n\n    /// @notice A record of states for signing / validating signatures\n    mapping(address => uint256) public nonces;\n\n    /// @notice An event thats emitted when the minter address is changed\n    event MinterChanged(address minter, address newMinter);\n\n    /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(\n        address indexed delegator,\n        address indexed fromDelegate,\n        address indexed toDelegate\n    );\n\n    /// @notice An event thats emitted when a delegate account's vote balance changes\n    event DelegateVotesChanged(\n        address indexed delegate,\n        uint256 previousBalance,\n        uint256 newBalance\n    );\n\n    /// @notice The standard EIP-20 transfer event\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    /// @notice The standard EIP-20 approval event\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount\n    );\n\n    /**\n     * @notice Construct a new Uni token\n     * @param account The initial account to grant all the tokens\n     * @param minter_ The account with minting ability\n     */\n    constructor(address account, address minter_) public {\n        _balances[account] = uint96(totalSupply);\n        emit Transfer(address(0), account, totalSupply);\n        minter = minter_;\n        emit MinterChanged(address(0), minter);\n    }\n\n    /**\n     * @notice Change the minter address\n     * @param minter_ The address of the new minter\n     */\n    function setMinter(address minter_) external {\n        require(\n            msg.sender == minter,\n            \"Blnd::setMinter: only the minter can change the minter address\"\n        );\n        emit MinterChanged(minter, minter_);\n        minter = minter_;\n    }\n\n    /**\n     * @notice Mint new tokens\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to be minted\n     */\n    function mint(address dst, uint256 rawAmount) external {\n        require(msg.sender == minter, \"Blnd::mint: only the minter can mint\");\n        require(\n            dst != address(0),\n            \"Blnd::mint: cannot transfer to the zero address\"\n        );\n\n        // mint the amount\n        uint96 amount = _safe96(\n            rawAmount,\n            \"Blnd::mint: amount exceeds 96 bits\"\n        );\n        totalSupply = _safe96(\n            SafeMath.add(totalSupply, amount),\n            \"Blnd::mint: totalSupply exceeds 96 bits\"\n        );\n\n        // transfer the amount to the recipient\n        _balances[dst] = _add96(\n            _balances[dst],\n            amount,\n            \"Blnd::mint: transfer amount overflows\"\n        );\n        emit Transfer(address(0), dst, amount);\n\n        // move delegates\n        _moveDelegates(address(0), delegates[dst], amount);\n    }\n\n    /**\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n     * @param account The address of the account holding the funds\n     * @param spender The address of the account spending the funds\n     * @return The number of tokens approved\n     */\n    function allowance(address account, address spender)\n        external\n        view\n        returns (uint256)\n    {\n        return _allowances[account][spender];\n    }\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n     * @return Whether or not the approval succeeded\n     */\n    function approve(address spender, uint256 rawAmount)\n        external\n        returns (bool)\n    {\n        uint96 amount;\n        if (rawAmount == uint256(-1)) {\n            amount = uint96(-1);\n        } else {\n            amount = _safe96(\n                rawAmount,\n                \"Blnd::approve: amount exceeds 96 bits\"\n            );\n        }\n\n        _allowances[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @notice Triggers an approval from owner to spends\n     * @param owner The address to approve from\n     * @param spender The address to be approved\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n     * @param deadline The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 rawAmount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        uint96 amount;\n        if (rawAmount == uint256(-1)) {\n            amount = uint96(-1);\n        } else {\n            amount = _safe96(rawAmount, \"Blnd::permit: amount exceeds 96 bits\");\n        }\n\n        bytes32 domainSeparator = keccak256(\n            abi.encode(\n                DOMAIN_TYPEHASH,\n                keccak256(bytes(name)),\n                _getChainId(),\n                address(this)\n            )\n        );\n        bytes32 structHash = keccak256(\n            abi.encode(\n                PERMIT_TYPEHASH,\n                owner,\n                spender,\n                rawAmount,\n                nonces[owner]++,\n                deadline\n            )\n        );\n        bytes32 digest = keccak256(\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\n        );\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"Blnd::permit: invalid signature\");\n        require(signatory == owner, \"Blnd::permit: unauthorized\");\n        require(now <= deadline, \"Blnd::permit: signature expired\");\n\n        _allowances[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @notice Get the number of tokens held by the `account`\n     * @param account The address of the account to get the balance of\n     * @return The number of tokens held\n     */\n    function balanceOf(address account) external view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transfer(address dst, uint256 rawAmount) external returns (bool) {\n        uint96 amount = _safe96(\n            rawAmount,\n            \"Blnd::transfer: amount exceeds 96 bits\"\n        );\n        _transferTokens(msg.sender, dst, amount);\n        return true;\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 rawAmount\n    ) external returns (bool) {\n        address spender = msg.sender;\n        uint96 spenderAllowance = _allowances[src][spender];\n        uint96 amount = _safe96(\n            rawAmount,\n            \"Blnd::approve: amount exceeds 96 bits\"\n        );\n\n        if (spender != src && spenderAllowance != uint96(-1)) {\n            uint96 newAllowance = _sub96(\n                spenderAllowance,\n                amount,\n                \"Blnd::transferFrom: transfer amount exceeds spender allowance\"\n            );\n            _allowances[src][spender] = newAllowance;\n\n            emit Approval(src, spender, newAllowance);\n        }\n\n        _transferTokens(src, dst, amount);\n        return true;\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) public {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        bytes32 domainSeparator = keccak256(\n            abi.encode(\n                DOMAIN_TYPEHASH,\n                keccak256(bytes(name)),\n                _getChainId(),\n                address(this)\n            )\n        );\n        bytes32 structHash = keccak256(\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\n        );\n        bytes32 digest = keccak256(\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\n        );\n        address signatory = ecrecover(digest, v, r, s);\n        require(\n            signatory != address(0),\n            \"Blnd::delegateBySig: invalid signature\"\n        );\n        require(\n            nonce == nonces[signatory]++,\n            \"Blnd::delegateBySig: invalid nonce\"\n        );\n        require(now <= expiry, \"Blnd::delegateBySig: signature expired\");\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account) external view returns (uint96) {\n        uint32 nCheckpoints = numCheckpoints[account];\n        return\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint256 blockNumber)\n        public\n        view\n        returns (uint96)\n    {\n        require(\n            blockNumber < block.number,\n            \"Blnd::getPriorVotes: not yet determined\"\n        );\n\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint32 lower = 0;\n        uint32 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    function _delegate(address delegator, address delegatee) internal {\n        address currentDelegate = delegates[delegator];\n        uint96 delegatorBalance = _balances[delegator];\n        delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _transferTokens(\n        address src,\n        address dst,\n        uint96 amount\n    ) internal {\n        require(\n            src != address(0),\n            \"Blnd::_transferTokens: cannot transfer from the zero address\"\n        );\n        require(\n            dst != address(0),\n            \"Blnd::_transferTokens: cannot transfer to the zero address\"\n        );\n\n        _balances[src] = _sub96(\n            _balances[src],\n            amount,\n            \"Blnd::_transferTokens: transfer amount exceeds balance\"\n        );\n        _balances[dst] = _add96(\n            _balances[dst],\n            amount,\n            \"Blnd::_transferTokens: transfer amount overflows\"\n        );\n        emit Transfer(src, dst, amount);\n\n        _moveDelegates(delegates[src], delegates[dst], amount);\n    }\n\n    function _moveDelegates(\n        address srcRep,\n        address dstRep,\n        uint96 amount\n    ) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint96 srcRepOld = srcRepNum > 0\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\n                    : 0;\n                uint96 srcRepNew = _sub96(\n                    srcRepOld,\n                    amount,\n                    \"Blnd::_moveVotes: vote amount underflows\"\n                );\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint96 dstRepOld = dstRepNum > 0\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\n                    : 0;\n                uint96 dstRepNew = _add96(\n                    dstRepOld,\n                    amount,\n                    \"Blnd::_moveVotes: vote amount overflows\"\n                );\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint32 nCheckpoints,\n        uint96 oldVotes,\n        uint96 newVotes\n    ) internal {\n        uint32 blockNumber = _safe32(\n            block.number,\n            \"Blnd::_writeCheckpoint: block number exceeds 32 bits\"\n        );\n\n        if (\n            nCheckpoints > 0 &&\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\n        ) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\n                blockNumber,\n                newVotes\n            );\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function _safe32(uint256 n, string memory errorMessage)\n        internal\n        pure\n        returns (uint32)\n    {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function _safe96(uint256 n, string memory errorMessage)\n        internal\n        pure\n        returns (uint96)\n    {\n        require(n < 2**96, errorMessage);\n        return uint96(n);\n    }\n\n    function _add96(\n        uint96 a,\n        uint96 b,\n        string memory errorMessage\n    ) internal pure returns (uint96) {\n        uint96 c = a + b;\n        require(c >= a, errorMessage);\n        return c;\n    }\n\n    function _sub96(\n        uint96 a,\n        uint96 b,\n        string memory errorMessage\n    ) internal pure returns (uint96) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    function _getChainId() internal pure returns (uint256) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return chainId;\n    }\n}\n",
  "compiler": {
    "name": "solc",
    "version": "0.5.17+commit.d19bba13.Emscripten.clang"
  },
  "networks": {
    "1": {
      "events": {
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        "0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "delegator",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "fromDelegate",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "toDelegate",
              "type": "address"
            }
          ],
          "name": "DelegateChanged",
          "type": "event"
        },
        "0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "previousBalance",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newBalance",
              "type": "uint256"
            }
          ],
          "name": "DelegateVotesChanged",
          "type": "event"
        },
        "0x3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "minter",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "newMinter",
              "type": "address"
            }
          ],
          "name": "MinterChanged",
          "type": "event"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        }
      },
      "links": {},
      "address": "0x72bF4427d6f433F6ee0229F2D81C267299aed9d1",
      "transactionHash": "0x93fc0c4abd5d7888bf51ccacb524afa489fa8e702d0fe79b7b7677c3eecc0d63"
    }
  },
  "schemaVersion": "3.2.4",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "return": "The number of tokens approved"
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "params": {
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "return": "Whether or not the approval succeeded"
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "return": "The number of tokens held"
      },
      "constructor": {
        "params": {
          "account": "The initial account to grant all the tokens",
          "minter_": "The account with minting ability"
        }
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "return": "The number of current votes for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "return": "The number of votes the account had as of the given block"
      },
      "mint(address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to be minted"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature"
        }
      },
      "setMinter(address)": {
        "params": {
          "minter_": "The address of the new minter"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer"
        },
        "return": "Whether or not the transfer succeeded"
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer",
          "src": "The address of the source account"
        },
        "return": "Whether or not the transfer succeeded"
      }
    }
  },
  "userdoc": {
    "methods": {
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "constructor": "Construct a new Uni token",
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "mint(address,uint256)": {
        "notice": "Mint new tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spends"
      },
      "setMinter(address)": {
        "notice": "Change the minter address"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      }
    }
  }
}